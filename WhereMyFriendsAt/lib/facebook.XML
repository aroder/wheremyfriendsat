<?xml version="1.0"?>
<doc>
    <assembly>
        <name>facebook</name>
    </assembly>
    <members>
        <member name="F:facebook.Forms.FacebookAuthentication.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:facebook.Forms.FacebookAuthentication.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:facebook.Forms.FacebookAuthentication.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:facebook.Forms.UnicodeUri">
            <summary>
            This class is only needed because the ToString method in the original
            URI class prints Unicode characters instead of their http-escaped
            versions. Since the .Net Compact Framework can only support the URI
            constructor for the WebBrowser control, we have to use this new URI
            class. 
            </summary>
        </member>
        <member name="T:facebook.users">
            <summary>
            users methods.
            </summary>
        </member>
        <member name="M:facebook.users.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.permissions
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.users.getInfo">
            <summary>
            Returns a wide array of user-specific information. The current user is determined from the session_key parameter. The only storable values returned from this call are the those under the affiliations element, the notes_count value, and the contents of the profile_update_time element.
            </summary>
            <returns>Currently logged in users' profile.</returns>
        </member>
        <member name="M:facebook.users.getInfo(System.Int64)">
            <summary>
            Returns a wide array of user-specific information. The current user is determined from the session_key parameter. The only storable values returned from this call are the those under the affiliations element, the notes_count value, and the contents of the profile_update_time element.
            </summary>
            <returns>Currently logged in users' profile.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:facebook.users.getInfo(System.Collections.Generic.List{System.Int64})" -->
        <member name="M:facebook.users.getInfo(System.String)">
            <summary>
            Returns a wide array of user-specific information for each user identifier passed, limited by the view of the current user. The current user is determined from the session_key parameter. The only storable values returned from this call are the those under the affiliations element, the notes_count value, and the contents of the profile_update_time element.
            </summary>
            <param name="uids">List of user ids. This is a comma-separated list of user ids.</param>
            <returns>The user info elements returned are those friends visible to the Facebook Platform. If no visible users are found from the passed uids argument, the method will return an empty result element.</returns>
        </member>
        <member name="M:facebook.users.getLoggedInUser">
            <summary>
            Get the facebook user id of the user associated with the current session
            </summary>
            <returns>facebook userid</returns>
        </member>
        <member name="M:facebook.users.hasAppPermission(facebook.Types.Enums.Extended_Permissions)">
            <summary>
            Checks whether the user has opted in to an extended application permission.
            </summary>
            <param name="ext_perm">String identifier for the extended permission that is being checked for. Must be one of status_update or photo_upload.</param>
            <returns>Returns 1 or 0.</returns>
        </member>
        <member name="M:facebook.users.isAppUser(System.Int64)">
            <summary>
            Returns whether the user (either the session user or user specified by uid) has authorized the calling application. 
            </summary>
            <param name="uid">The user ID of the user who may have authorized the application. If this parameter is not specified, then it defaults to the session user. This parameter applies only to Web applications and is required by them only if the session_key is not specified. Facebook ignores this parameter if it is passed by a desktop application. </param>
            <returns></returns>
        </member>
        <member name="M:facebook.users.setStatus(System.String)">
            <summary>
            Updates a user's Facebook status. This method requires the extended permission status_update, which the user must opt into via the Extended Permissions system. You can test for this permission by checking for the error code listed below (250), or via the users.hasAppPermission method.
            </summary>
            <param name="status">A status message</param>
            <returns>Returns true or false if the update succeeded</returns>
        </member>
        <member name="M:facebook.users.setStatus(System.String,System.Boolean)">
            <summary>
            Updates a user's Facebook status. This method requires the extended permission status_update, which the user must opt into via the Extended Permissions system. You can test for this permission by checking for the error code listed below (250), or via the users.hasAppPermission method.
            </summary>
            <param name="status">A status message.</param>
            <param name="status_includes_verb">Pass True to avoid automatic "is" prepend.</param>
            <returns>Returns true or false if the update succeeded</returns>
        </member>
        <member name="T:facebook.Types.Enums">
            <summary>
            Facebook Enums TODO: Move all these to an xml as key/value pairs and use Linq to XML or something cleaner
            </summary>
        </member>
        <member name="T:facebook.Types.Enums.Extended_Permissions">
            <summary>
            Extended Permissions
            </summary>
        </member>
        <member name="F:facebook.Types.Enums.Extended_Permissions.status_update">
            <summary>
            Status Update
            </summary>
        </member>
        <member name="F:facebook.Types.Enums.Extended_Permissions.photo_upload">
            <summary>
            Photo Upload
            </summary>
        </member>
        <member name="F:facebook.Types.Enums.Extended_Permissions.create_listing">
            <summary>
            Create a listing
            </summary>
        </member>
        <member name="T:facebook.Types.Enums.ObjectPropertyType">
            <summary>
            Represents the type of an object property.
            </summary>
        </member>
        <member name="F:facebook.Types.Enums.ObjectPropertyType.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:facebook.Types.Enums.ObjectPropertyType.String">
            <summary>
            String with less than 255 characters.
            </summary>
        </member>
        <member name="F:facebook.Types.Enums.ObjectPropertyType.TextBlob">
            <summary>
            Text blob which less than 64kb.
            </summary>
        </member>
        <member name="T:facebook.Types.Enums.DataAssociationType">
            <summary>
            Type of data association.
            </summary>
        </member>
        <member name="F:facebook.Types.Enums.DataAssociationType.OneWay">
            <summary>
            One-way association, where reverse lookup is not needed.
            </summary>
        </member>
        <member name="F:facebook.Types.Enums.DataAssociationType.TwoWaySymmetric">
            <summary>
            Two-way symmetric association, where a backward association
            (B to A) is always created when a forward association (A to B) is created.
            </summary>
        </member>
        <member name="F:facebook.Types.Enums.DataAssociationType.TwoWayAsymmetric">
            <summary>
            Two-way asymmetric association, where a backward association (B to A) has
            different meaning than a forward association (A to B).
            </summary>
        </member>
        <member name="T:facebook.groups">
            <summary>
            facebook.groups methods.
            </summary>
        </member>
        <member name="M:facebook.groups.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.groups
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.groups.get">
            <summary>
            Returns all visible groups according to the filters specified. This may be used to find all groups of which a user is as member, or to query specific gids.
            </summary>
            <returns>All groups of the session user.</returns>
        </member>
        <member name="M:facebook.groups.get(System.Int64)">
            <summary>
            Returns all visible groups according to the filters specified. This may be used to find all groups of which a user is as member, or to query specific gids.
            </summary>
            <param name="uid">Filter by groups associated with a user with this uid</param>
            <returns>All groups of the supplied user id.</returns>
        </member>
        <member name="M:facebook.groups.get(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns all visible groups according to the filters specified. This may be used to find all groups of which a user is as member, or to query specific gids.
            </summary>
            <param name="gids">Filter by this list of group ids. This is a comma-separated list of gids.</param>
            <returns>If the uid parameter is omitted, the method returns all groups associted with the provided gids, regardless of any user relationship.</returns>
        </member>
        <member name="M:facebook.groups.get(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns all visible groups according to the filters specified. This may be used to find all groups of which a user is as member, or to query specific gids.
            </summary>
            <param name="uid">Filter by groups associated with a user with this uid</param>
            <param name="gids">Filter by this list of group ids. This is a comma-separated list of gids.</param>
            <returns>This method returns all groups satisfying the filters specified. The method can be used to return all groups associated with user, or query a specific set of events by a list of gids. If both the uid and gids parameters are provided, the method returns all groups in the set of gids, with which the user is associated. If the gids parameter is omitted, the method returns all groups associated with the provided user.</returns>
            <remarks>Group creators will be visible to an application only if the creator has not turned off access to the Platform or used the application'; If the creator has opted out, the creator element will appear as nil=true.</remarks>
        </member>
        <member name="M:facebook.groups.getMembers(System.Int64)">
            <summary>
            Returns membership list data associated with a group.
            </summary>
            <param name="gid">Group id to return members for.</param>
            <returns>This method returns four (possibly empty) lists of users associated with a group, keyed on their associations. The members list will contain the officers and admins lists, but will not overlap with the not_replied list.</returns>
        </member>
        <member name="T:facebook.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.DummyCallbackUrl">
            <summary>
              Looks up a localized string similar to http://dummy-callback-url/.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.FacebookAuthenticationFormName">
            <summary>
              Looks up a localized string similar to Facebook Login.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.FacebookLoginUrl">
            <summary>
              Looks up a localized string similar to https://login.facebook.com/login.php?api_key={0}&amp;auth_token={1}&amp;v=1.0&amp;popup.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.FacebookLogoutUrl">
            <summary>
              Looks up a localized string similar to http://www.facebook.com/logout.php?api_key={0}&amp;auth_token={1}&amp;v=1.0&amp;confirm=1.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.FacebookNamespace">
            <summary>
              Looks up a localized string similar to http://api.facebook.com/1.0/.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.FacebookRequestExtendedPermissionUrl">
            <summary>
              Looks up a localized string similar to http://www.facebook.com/authorize.php?api_key={0}&amp;v=1.0&amp;ext_perm={1}.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.FacebookRESTUrl">
            <summary>
              Looks up a localized string similar to http://api.facebook.com/restserver.php.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.MissingPictureUrl">
            <summary>
              Looks up a localized string similar to http://static.ak.facebook.com/pics/s_default.jpg.
            </summary>
        </member>
        <member name="P:facebook.Properties.Resources.SendRequestUrl">
            <summary>
              Looks up a localized string similar to http://www.facebook.com/multi_friend_selector.php.
            </summary>
        </member>
        <member name="T:facebook.Utility.FacebookException">
            <summary>
            Represents an error returned by the Facebook REST-like API.
            </summary>
        </member>
        <member name="M:facebook.Utility.FacebookException.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructor for the FacebookException.
            </summary>
            <param name="errorXml">The request that caused the error, in XML format.</param>
            <param name="errorCode">The specific error code returned by Facebook.</param>
            <param name="message">The error message returned by Facebook.</param>
            <param name="requestXml">The request that caused the error, in XML format.</param>
        </member>
        <member name="P:facebook.Utility.FacebookException.ErrorXml">
            <summary>
            The error returned by Facebook in XML format.
            </summary>
        </member>
        <member name="P:facebook.Utility.FacebookException.ErrorCode">
            <summary>
            The specific error code returned by Facebook.
            </summary>
        </member>
        <member name="P:facebook.Utility.FacebookException.Message">
            <summary>
            The error message returned by Facebook.
            </summary>
        </member>
        <member name="P:facebook.Utility.FacebookException.RequestXml">
            <summary>
            The request that caused the error, in XML format.
            </summary>
        </member>
        <member name="P:facebook.Utility.FacebookException.ErrorType">
            <summary>
            A value representing the specific type of error returned by Facebook.
            </summary>
        </member>
        <member name="T:facebook.Utility.ErrorType">
            <summary>
            A value representing the specific type of error returned by Facebook.
            </summary>
        </member>
        <member name="T:facebook.events">
            <summary>
            Events methods
            </summary>
        </member>
        <member name="M:facebook.events.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.events
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.events.get(System.Nullable{System.Int64},System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Returns all visible events according to the filters specified. This may be used to find all events of a user, or to query specific eids.
            </summary>
            <param name="uid">Filter by events associated with a user with this uid.</param>
            <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
            <param name="start_time">Filter with this UTC as lower bound. A missing or zero parameter indicates no lower bound.</param>
            <param name="end_time">Filter with this UTC as upper bound. A missing or zero parameter indicates no upper bound.</param>
            <param name="rsvp_status">Filter by this RSVP status.  attending,unsure,declined,not_replied </param>
            <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:facebook.events.cancel(System.Int64,System.String)">
            <summary>
            Cancels the event
            </summary>
            <param name="eid">Unique identifier of event to cancel.</param>
            <param name="cancelMessage">string explaining why event was cancelled </param>
            <returns>If successful</returns> 
        </member>
        <member name="M:facebook.events.create(facebook.Schema.facebookevent)">
             <summary>
             Create an event - You must pass the following parameters in the event_info array: 
            name 
            category 
            subcategory 
            location 
            start_time 
            end_time 
            Note: The start_time and end_time are the times that were input by the event creator, converted to UTC after assuming that they were in Pacific time (Daylight Savings or Standard, depending on the date of the event), then converted into Unix epoch time. 
            
            Optionally, you can pass the following parameters in the event_info array: 
                
            street 
            phone 
            email 
            host_id 
            host 
            desc 
            privacy_type 
            tagline 
             </summary>
             <param name="event_info">key value pairs describin the event.</param>
             <returns>The eid of the created event</returns> 
        </member>
        <member name="M:facebook.events.edit(System.Int64,facebook.Schema.facebookevent)">
             <summary>
             Create an event - You must pass the following parameters in the event_info array: 
            name 
            category 
            subcategory 
            location 
            start_time 
            end_time 
            Note: The start_time and end_time are the times that were input by the event creator, converted to UTC after assuming that they were in Pacific time (Daylight Savings or Standard, depending on the date of the event), then converted into Unix epoch time. 
            
            Optionally, you can pass the following parameters in the event_info array: 
                
            street 
            phone 
            email 
            host_id 
            host 
            desc 
            privacy_type 
            tagline 
             </summary>
             <param name="eid">identifier of the event being updated</param>
             <param name="event_info">key value pairs describing the event.</param>
             <returns>If successful</returns> 
        </member>
        <member name="M:facebook.events.rsvp(System.Int64,System.String)">
            <summary>
            Sets the rsvp status
            </summary>
            <param name="eid">Unique identifier of event to cancel.</param>
            <param name="rsvpStatus">The user's RSVP status. Specify attending, unsure, or declined. </param>
            <returns>If successful</returns> 
        </member>
        <member name="M:facebook.events.getMembers(System.Int64)">
            <summary>
            Returns membership list data associated with an event.
            </summary>
            <param name="eid">Event id to return users for.</param>
            <returns>This method returns four (possibly empty) lists of users associated with an event, keyed on their associations. These lists should never share any members.</returns>
            <remarks>The lists can contain uids of users not using the calling application.</remarks>
        </member>
        <member name="M:facebook.events.get">
            <summary>
            Returns all visible events for the logged-in user.
            </summary>
            <returns>A list of events.</returns> 
        </member>
        <member name="M:facebook.events.get(System.Nullable{System.Int64})">
            <summary>
            Returns all visible events for the given user.
            </summary>
            <param name="uid">The user to get events for.</param>
            <returns>A list of events belonging to that user.</returns>
        </member>
        <member name="M:facebook.events.get(System.Nullable{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns all visible events for the given user.
            </summary>
            <param name="uid">The user to get events for.</param>
            <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
            <returns>A list of events belonging to that user.</returns>
        </member>
        <member name="M:facebook.events.get(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns the events corresponding to the given event ids.
            </summary>
            <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
            <returns>A list of the events corresponding to the given evnet ids.</returns>
        </member>
        <member name="M:facebook.events.get(System.Nullable{System.Int64},System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Returns all visible events according to the filters specified. This may be used to find all events of a user, or to query specific eids.
            </summary>
            <param name="uid">Filter by events associated with a user with this uid.</param>
            <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
            <param name="start_time">Filter with this UTC as lower bound. A missing or zero parameter indicates no lower bound.</param>
            <param name="end_time">Filter with this UTC as upper bound. A missing or zero parameter indicates no upper bound.</param>
            <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="F:facebook.Forms.FacebookExtendedPermission.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:facebook.Forms.FacebookExtendedPermission.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:facebook.Forms.FacebookExtendedPermission.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:facebook.friends">
            <summary>
            friends methods
            </summary>
        </member>
        <member name="M:facebook.friends.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.friends
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.friends.areFriends(System.Collections.Generic.List{facebook.Schema.user},System.Collections.Generic.List{facebook.Schema.user})">
            <summary>
            Returns whether or not each pair of specified users is friends with each other. The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.
            </summary>
            <param name="users1">A list of user ids matched with uids2. This is a list of users.</param>
            <param name="users2">A list of user ids matched with uids1. This is a list of users.</param>
            <returns>Returns a list of friend_info elements corresponding to the lists passed.</returns>
        </member>
        <member name="M:facebook.friends.areFriends(System.Int64,System.Int64)">
            <summary>
            Returns whether or not each pair of specified users is friends with each other. The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.
            </summary>
            <param name="uid1">the first user id</param>
            <param name="uid2">the second user id</param>
            <returns>Returns a list of friend_info elements corresponding to the lists passed. The are_friends subelement of each friend_info element will be 0 if the users are not friends, and 1 if they are friends. For each pair, this function is symmetric (does not matter which user is in uids1 and which is in uids2).</returns>
        </member>
        <member name="M:facebook.friends.areFriends(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns whether or not each pair of specified users is friends with each other. The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.
            </summary>
            <param name="uids1">A list of user ids matched with uids2. This is a comma-separated list of user ids.</param>
            <param name="uids2">A list of user ids matched with uids1. This is a comma-separated list of user ids.</param>
            <returns>Returns a list of friend_info elements corresponding to the lists passed. The are_friends subelement of each friend_info element will be 0 if the users are not friends, and 1 if they are friends. For each pair, this function is symmetric (does not matter which user is in uids1 and which is in uids2).</returns>
        </member>
        <member name="M:facebook.friends.get(System.Int64)">
            <summary>
            Returns the identifiers of the current user's Facebook friends. The current user is determined from the session_key parameter. The values returned from this call are not storable.
            </summary>
            <param name="flid">Get the friends belonging to a Friend List.</param>
            <returns>Friend user ids.</returns>
        </member>
        <member name="M:facebook.friends.getAppUsers">
            <summary>
            Returns the identifiers of the current user's Facebook friends who are signed up for the specific calling application. The current user is determined from the session_key parameter. The values returned from this call are not storable.
            </summary>
            <returns>The friend ids returned are those friends signed up for the calling application, a subset of the friends returned from the facebook.friends.get method. If no friends are found, the method will return an empty friends_getAppUsers_response element.</returns>
        </member>
        <member name="M:facebook.friends.getLists">
            <summary>
            Returns the names and identifiers of any Friend Lists that the user has created. The current user is determined from the session_key parameter. The values returned from this call are storable (i.e., you may store the id of a friend list that the user has elected for use in some feature of your application), but should be verified periodically, as users may delete or modify lists at any time. Friend Lists are private on Facebook, so this information must not be republished to anyone other than the logged in user. Members of lists may be obtained using friends.get with an flid parameter.
            </summary>
            <returns>Friend list ids (flid) and list names.</returns>
        </member>
        <member name="M:facebook.friends.get">
            <summary>
            Returns the identifiers of the current user's Facebook friends. The current user is determined from the session_key parameter. The values returned from this call are not storable.
            </summary>
            <returns>Friend user ids.</returns>
        </member>
        <member name="M:facebook.friends.areFriends(facebook.Schema.user,facebook.Schema.user)">
            <summary>
            Returns whether or not the pair of specified users is friends with each other.
            </summary>
            <param name="user1">First user.</param>
            <param name="user2">Second user.</param>
            <returns>Returns a list of friend_info elements corresponding to the lists passed.</returns>
        </member>
        <member name="M:facebook.friends.getUserObjects">
            <summary>
            Returns the a list of user object for all of the logged in users friends
            </summary>
            <returns>Friend user ids.</returns>
        </member>
        <member name="M:facebook.friends.getUserObjects(System.Int64)">
            <summary>
            Returns the a list of user object for all of the logged in users friends in the specified friend lists
            </summary>
            <param name="flid">Get the friends belonging to a Friend List.</param>
            <returns>Friend user ids.</returns>
        </member>
        <member name="M:facebook.friends.getAppUsersObjects">
            <summary>
            Returns the a list of user object for all of the logged in users friends that are users of this application
            </summary>
            <returns>The friend ids returned are those friends signed up for the calling application, a subset of the friends returned from the facebook.friends.get method. If no friends are found, the method will return an empty friends_getAppUsers_response element.</returns>
        </member>
        <member name="T:facebook.feed">
            <summary>
            feed methods
            </summary>
        </member>
        <member name="M:facebook.feed.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.feed
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.feed.publishTemplatizedAction(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.ObjectModel.Collection{facebook.Schema.feed_image})">
            <summary>
            Publishes a Mini-Feed story to the user corresponding to the session_key parameter, and publishes News Feed stories to the friends of that user who have added the application.
            </summary>
            <param name="title_template"></param>
            <param name="title_data"></param>
            <param name="body_template"></param>
            <param name="body_data"></param>
            <param name="images"></param>
            <returns></returns>
        </member>
        <member name="M:facebook.feed.publishTemplatizedAction(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.Collections.ObjectModel.Collection{facebook.Schema.feed_image},System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Publishes a Mini-Feed story to the user corresponding to the session_key parameter, and publishes News Feed stories to the friends of that user who have added the application.
            </summary>
            <param name="title_template">The templatized markup displayed in the feed story's title section. This template must contain the token {actor} somewhere in it.</param>
            <param name="title_data">Optional - A JSON-encoded associative array of the values that should be substituted into the templates in the title_template markup string. The keys of this array are the tokens, and their associated values are the desired substitutions. 'actor' and 'target' are special tokens and should not be included in this array. If your title_template contains tokens besides 'actor' and 'target', then this is a required parameter.</param>
            <param name="body_template">Optional - The markup displayed in the feed story's body section.</param>
            <param name="body_data">Optional - A JSON-encoded associative array of the values that should be substituted into the templates in the body_template markup string. The keys of this array are the tokens, and their associated values are the desired substitutions. 'actor' and 'target' are special token and should not be included in this array.</param>
            <param name="body_general">Optional - Additional markup displayed in the feed story's body section. This markup is not required to be identical for two stories to be aggregated. One of the two will be chosen at random.</param>
            <param name="page_actor_id">Optional - if publishing a story to a Facebook Page, use this parameter as the page who performed the action. If you use this parameter, the application must be added to that Page's Feed. A session key is not required to do this.</param>
            <param name="images"></param>
            <param name="target_ids"></param>
            <returns></returns>
        </member>
        <member name="M:facebook.feed.deactivateTemplateBundleByID(System.String)">
            <summary>
            Deactivates a previously registered template bundle. Once a template bundle has been deactivated, it can no longer be used to publish stories via feed.publishUserAction. Stories published against the template bundle prior to its deactivation are still valid and will show up in Mini-Feed and News Feed. The response is true if and only if the template bundle, identified by template_bundle_id, is an active template bundle owned by the requesting application, and false otherwise. 
            </summary>
            <param name="template_bundle_id">The template bundle ID used to identify a previously registered template bundle. The ID is the one returned by a previous call to feed.registerTemplateBundle. </param>
            <returns>True or False</returns>
        </member>
        <member name="M:facebook.feed.getRegisteredTemplateBundleByID(System.Int64)">
            <summary>
            Retrieves information about a specified template bundle previously registered by the requesting application. 
            </summary>
            <param name="template_bundle_id">The template bundle ID used to identify a previously registered template bundle. The ID is the one returned by a previous call to feed.registerTemplateBundle. </param>
            <returns>Story Templates</returns>
        </member>
        <member name="M:facebook.feed.getRegisteredTemplateBundles">
            <summary>
            Retrieves the full list of all the template bundles registered by the requesting application. The list does not include any of the template bundles previously deactivated via calls to feed.deactivateTemplateBundleByID. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:facebook.feed.registerTemplateBundle(System.Collections.Generic.List{System.String},System.Collections.Generic.List{facebook.feedTemplate},facebook.feedTemplate)">
            <summary>
            Builds a template bundle around the specified templates, registers them on Facebook, and responds with a template bundle ID that can be used to identify your template bundle to other Feed-related API calls. You need to register at least one bundle for each of your applications, if you have more than one.
            </summary>
            <param name="oneLineStoryTemplates"></param>
            <param name="fullStoryTemplate"></param>
            <param name="shortStoryTemplates"></param>
        </member>
        <member name="M:facebook.feed.publishUserAction(System.Int64,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Int64},System.String,facebook.feed.PublishedStorySize)">
            <summary>
            http://wiki.developers.facebook.com/index.php/Feed.publishUserAction
            Publishes a story on behalf of the user owning the session, using the specified template bundle. 
            An application can publish a maximum of 10 stories per user per day
            You can test your Feed templates using the Feed preview console (cf above wiki post).
            
            Use JSONHelper.ConvertToJSONArray and/or JSONHelper.ConvertToJSONAssociativeArray to add 'subarrays' in template_data
            
            Reserved tokens in template_data: 
                actor
                target
                
            Special tokens in template_data:
                images: array of image. image: src, (optional)href
                flash: swfsrc, imgsrc, (optional)expanded_width, (optional)expanded_height
                mp3: src, (optional)title, (optional)artist, (optional)album
                video: video_src, preview_img, (optional)video_title, (optional)video_link, (optional)video_type (default:application/x-shockwave-flash)
                
            </summary>
            <param name="template_bundle_id">The template bundle ID used to identify a previously registered template bundle. The ID is the one returned by a previous call to feed.registerTemplateBundle.</param>
            <param name="template_data">Optional - A JSON-encoded associative array of the values that should be substituted into the templates.</param>
            <param name="target_ids">Optional - list of IDs of friends of the actor, used for stories about a direct action between the actor and the targets of his or her action.</param>
            <param name="body_general">Optional - Additional markup that extends the body of a short story.</param>
            <param name="story_size">Can be 1 (one line, default), 2 (short) or 4 (full).</param>
            <returns>true if all succeeds, and false if the user never authorized the application to publish to his or her Wall.</returns>
        </member>
        <member name="M:facebook.feed.AddFeedImages(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{facebook.Schema.feed_image})">
            <summary>
            Adds image, image link key value pairs to the request parameter list.
            </summary>
            <param name="dict"></param>
            <param name="images"></param>
        </member>
        <member name="T:facebook.feed.PublishedStorySize">
            <summary>
            Different story sizes to use when publishing user actions to their feed.
            </summary>
        </member>
        <member name="T:facebook.feedTemplate">
            <summary>
            Contains the different parts of a Facebook feed template.
            </summary>
        </member>
        <member name="P:facebook.feedTemplate.TemplateTitle">
            <summary>
            The title of the template
            </summary>
        </member>
        <member name="P:facebook.feedTemplate.TemplateBody">
            <summary>
            The body of the template.
            </summary>
        </member>
        <member name="P:facebook.feedTemplate.PreferredLayout">
            <summary>
            The preferred layout for the template.
            </summary>
        </member>
        <member name="T:facebook.liveMessage">
            <summary>
            Public class facebook.liveMessage
            </summary>
        </member>
        <member name="M:facebook.liveMessage.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.liveMessage
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.liveMessage.send(System.Int64,System.String,System.String)">
            <summary>
            Sends a live message to a particular user's browser, which should be handled in FBJS. Messages can only be sent and received by users who have accepted your application's Terms of Service. 
            </summary>
            <param name="recipient">The message recipient. </param>
            <param name="event_name">Name of the "event" for which messages will be sent and received (max length: 128 bytes). A LiveMessage FBJS object must be initialized with this event name to receive the message. </param>
            <param name="message">A JSON-encoded string of the message to send (max length: 1024 bytes). </param>
            <returns>Boolean of success or failure.</returns>
        </member>
        <member name="T:facebook.fql">
            <summary>
            fql methods
            </summary>
        </member>
        <member name="M:facebook.fql.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.fql
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.fql.query(System.String)">
            <summary>
            Sends a direct FQL query to FB
            </summary>
            <param name="query">FQL Query</param>
            <returns>Result of the FQL query as an XML string</returns> 
        </member>
        <member name="M:facebook.Utility.DateHelper.ConvertDoubleToDate(System.Double)">
            <summary>
            Convert UTC time, as returned by Facebook, to localtime.
            </summary>
            <param name="secondsSinceEpoch">The number of seconds since Jan 1, 1970.</param>
            <returns>Local time.</returns>
        </member>
        <member name="M:facebook.Utility.DateHelper.ConvertDateToDouble(System.Nullable{System.DateTime})">
            <summary>
            Convert datetime to UTC time, as understood by Facebook.
            </summary>
            <param name="dateToConvert">The date that we need to pass to the api.</param>
            <returns>The number of seconds since Jan 1, 1970.</returns>
        </member>
        <member name="T:facebook.Components.FacebookServiceDesignerActionList">
            <summary>
            
            </summary>
        </member>
        <member name="M:facebook.Components.FacebookServiceDesignerActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:facebook.Components.FacebookServiceDesignerActionList.SetProperty(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="P:facebook.Components.FacebookServiceDesignerActionList.ApplicationKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookServiceDesignerActionList.Secret">
            <summary>
            
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookServiceDesignerActionList.FacebookService">
            <summary>
            
            </summary>
        </member>
        <member name="T:facebook.batch">
            <summary>
            
            </summary>
        </member>
        <member name="M:facebook.batch.#ctor(facebook.API)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:facebook.batch.executeBatch">
            <summary>
            Executes the current batch.
            </summary>
            <returns></returns>
        </member>
        <member name="T:facebook.Schema.album">
            <summary>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.album.#ctor">
            <summary>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.album.aid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.album.cover_pid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.album.owner">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.album.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.album.created">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.album.modified">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.album.description">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.album.location">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.album.link">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.album.size">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.photo_tag">
            <summary>
            <para>
            Regular expression: (pid, subject?, text?, xcoord, ycoord, created)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.photo_tag.#ctor">
            <summary>
            <para>
            Regular expression: (pid, subject?, text?, xcoord, ycoord, created)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo_tag.pid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, subject?, text?, xcoord, ycoord, created)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo_tag.subject">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (pid, subject?, text?, xcoord, ycoord, created)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo_tag.text">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (pid, subject?, text?, xcoord, ycoord, created)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo_tag.xcoord">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, subject?, text?, xcoord, ycoord, created)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo_tag.ycoord">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, subject?, text?, xcoord, ycoord, created)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo_tag.created">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, subject?, text?, xcoord, ycoord, created)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.photo">
            <summary>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.photo.#ctor">
            <summary>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo.pid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo.aid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo.owner">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo.src">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo.src_big">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo.src_small">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo.link">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo.caption">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo.created">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photo.story_fbid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.facebookevent">
            <summary>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.facebookevent.#ctor">
            <summary>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.eid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.tagline">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.nid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.pic">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.pic_big">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.pic_small">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.host">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.description">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.event_type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.event_subtype">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.start_time">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.end_time">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.creator">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.update_time">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.location">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.facebookevent.venue">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (eid, name, tagline, nid, pic, pic_big, pic_small, host, description, event_type, event_subtype, start_time, end_time, creator, update_time, location, venue)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.group">
            <summary>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.group.#ctor">
            <summary>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.gid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.nid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.description">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.group_type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.group_subtype">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.recent_news">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.pic">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.pic_big">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.pic_small">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.creator">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.update_time">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.office">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.website">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group.venue">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (gid, name, nid, description, group_type, group_subtype, recent_news, pic, pic_big, pic_small, creator, update_time, office, website, venue)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.user">
            <summary>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.user.#ctor">
            <summary>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.about_me">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.activities">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.affiliations">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.birthday">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.books">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.current_location">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.education_history">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.first_name">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.hometown_location">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.hs_info">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.interests">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.is_app_user">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.last_name">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.meeting_for">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.meeting_sex">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.movies">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.music">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.name">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.notes_count">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.pic">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.pic_big">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.pic_small">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.political">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.profile_update_time">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.quotes">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.relationship_status">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.religion">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.sex">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.significant_other_id">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.status">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.timezone">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.tv">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.uid">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.wall_count">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.work_history">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.pic_square">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.has_added_app">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.email_hashes">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (about_me?, activities?, affiliations?, birthday?, books?, current_location?, education_history?, first_name?, hometown_location?, hs_info?, interests?, is_app_user?, last_name?, meeting_for?, meeting_sex?, movies?, music?, name?, notes_count?, pic?, pic_big?, pic_small?, political?, profile_update_time?, quotes?, relationship_status?, religion?, sex?, significant_other_id?, status?, timezone?, tv?, uid?, wall_count?, work_history?, pic_square?, has_added_app?, email_hashes?)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.user.affiliationsLocalType">
            <summary>
            <para>
            Regular expression: (affiliation*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.user.affiliationsLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (affiliation*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.affiliationsLocalType.affiliation">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (affiliation*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.affiliationsLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.user.education_historyLocalType">
            <summary>
            <para>
            Regular expression: (education_info*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.user.education_historyLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (education_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.education_historyLocalType.education_info">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (education_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.education_historyLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.user.meeting_forLocalType">
            <summary>
            <para>
            Regular expression: (seeking*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.user.meeting_forLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (seeking*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.meeting_forLocalType.seeking">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (seeking*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.meeting_forLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.user.meeting_sexLocalType">
            <summary>
            <para>
            Regular expression: (sex*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.user.meeting_sexLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (sex*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.meeting_sexLocalType.sex">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (sex*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.meeting_sexLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.user.work_historyLocalType">
            <summary>
            <para>
            Regular expression: (work_info*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.user.work_historyLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (work_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.work_historyLocalType.work_info">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (work_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.work_historyLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.user.email_hashesLocalType">
            <summary>
            <para>
            Regular expression: (email_hashes_elt*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.user.email_hashesLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (email_hashes_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.email_hashesLocalType.email_hashes_elt">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (email_hashes_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user.email_hashesLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.feed_image.#ctor(System.String,System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:facebook.Schema.feed_image.image_url">
            <summary>
            The URL of an image to be displayed in the News Feed story.
            </summary>
        </member>
        <member name="P:facebook.Schema.feed_image.image_link_url">
            <summary>
            The URL destination after a click on the image referenced by ImageURL.
            </summary>
        </member>
        <member name="T:facebook.fbml">
            <summary>
            Facebook fbml api methods.
            </summary>
        </member>
        <member name="M:facebook.fbml.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.fbml
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.fbml.refreshImgSrc(System.String)">
            <summary>
            Fetches and re-caches the image stored at the given URL, for use in images published to non-canvas pages via the API (e.g. to user profiles via facebook.profile.setFBML, or to news feed via facebook.feed.publishActionOfUser). See the FBML documentation for a description of the markup and its role in various contexts.
            </summary>
            <param name="url">Absolute URL from which to refresh the image.</param>
            <returns>This method returns 1 if Facebook found a cached version of your image and successfully refreshed the image. It returns a blank response if Facebook was unable to find any previously cached version to refresh, or the image was unable to be re-fetched from your site and cached successfully. In such instances, whatever images were cached before remain as they were cached.</returns>
        </member>
        <member name="M:facebook.fbml.refreshRefUrl(System.String)">
            <summary>
            Fetches and re-caches the content stored at the given URL, for use in a fb:ref FBML tag. See the FBML documentation for a description of the markup and its role in various contexts.
            </summary>
            <param name="url">Absolute URL from which to fetch content. This URL should be used in a fb:ref FBML tag.</param>
            <returns>The result of the method call as a string.</returns>
        </member>
        <member name="M:facebook.fbml.setRefHandle(System.String,System.String)">
            <summary>
            Associates a given "handle" with FBML markup so that the handle can be used within the fb:ref FBML tag. A handle is unique within an application and allows an application to publish identical FBML to many user profiles and do subsequent updates without having to republish FBML on behalf of each user. See the FBML documentation for a description of the markup and its role in various contexts.
            </summary>
            <param name="handle">Handle to associate with the given FBML.</param>
            <param name="fbml">FBML to associate with the given handle.</param>
            <returns>The result of the method call as a binary string.</returns>
        </member>
        <member name="M:facebook.fbml.uploadNativeStrings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Lets you insert text strings in their native language into the Facebook Translations database so they can be translated. See Translating Platform Applications for more information about translating your applications. 
            </summary>
            <param name="native_strings">A JSON-encoded array of strings to translate. Each element of the string array is another array, with text storing the actual string, description storing the description of the text. </param>
            <returns>If successful, this method returns the number of strings uploaded. </returns>
        </member>
        <member name="T:facebook.application">
            <summary>
            Facebook application api methods.
            </summary>
        </member>
        <member name="M:facebook.application.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.auth
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.application.getPublicInfo(System.Int32,System.String,System.String)">
            <summary>
            Returns public information for an application (as shown in the application directory) by either application ID, API key, or canvas page name. 
            </summary>
            <param name="application_id">Application ID of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name. </param>
            <param name="application_api_key">API key of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name. </param>
            <param name="application_canvas_name">Canvas page name of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name. </param>
            <returns>list of app_info objects</returns>
        </member>
        <member name="M:facebook.application.getPublicInfo">
            <summary>
            Returns public information for the current application (as shown in the application directory) by either application ID, API key, or canvas page name. 
            </summary>
            <returns>list of app_info objects</returns>
        </member>
        <member name="T:facebook.data">
            <summary>
            Facebook data api methods.
            </summary>
        </member>
        <member name="M:facebook.data.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.data
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.data.setUserPreference(System.Int32,System.String)">
            <summary>
            Sets currently authenticated user's preference. Each preference is a string of maximum 128 characters and each of them has a numeric identifier ranged from 0 to 200. Therefore, every application can store up to 201 string values for each of its users.
            </summary>
            <param name="pref_id">(0-201) Numeric identifier of this preference.</param>
            <param name="value">(max. 128 characters) Value of the preference to set. Set it to "0" or "" to remove this preference.</param>
            <returns>Empty response if succesful, error otherwise.</returns>
            <remarks>To "remove" a preference, set it to 0 or empty string. Both "0" and "" are considered as "not present", and getPreference() call will not return them. To tell them from each other, one can use some serialization format. For example, "n:0" for zeros and "s:" for empty strings. </remarks>
        </member>
        <member name="M:facebook.data.setUserPreferences(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Sets currently authenticated user's preferences in batch. Each preference is a string of maximum 128 characters and each of them has a numeric identifier ranged from 0 to 200. Therefore, every application can store up to 201 string values for each of its user. 
            </summary>
            <param name="values">Id-value pairs of preferences to set. Each id is an integer between 0 and 200 inclusively. Each value is a string with maximum length of 128 characters. Use "0" or "" to remove a preference.</param>
            <param name="replace">True to replace all existing preferences of this user; false to merge into existing preferences.</param>
            <returns>Empty response if succesful, error otherwise.</returns>
            <remarks>To "remove" a preference, set it to 0 or empty string. Both "0" and "" are considered as "not present", and getPreference() call will not return them. To tell them from each other, one can use some serialization format. For example, "n:0" for zeros and "s:" for empty strings. </remarks>
        </member>
        <member name="M:facebook.data.getUserPreference(System.Int32)">
            <summary>
            Gets currently authenticated user's preference. 
            </summary>
            <param name="pref_id">(0-200) Numeric identifier of the preference to get. </param>
            <returns>string: value of the specified preference. Empty string if the preference was not set, or it was set to "0" or empty string before.</returns>
        </member>
        <member name="M:facebook.data.createObjectType(System.String)">
            <summary>
            An object type is like a "table" in SQL terminology, or a "class" in object-oriented programming concepts. Each object type has a unique human-readable "name" that will be used to identify itself throughout the API. Each object type also has a list of properties that one has to define individually. Each property is like a "column" in an SQL table, or a "data member" in an object class. 
            </summary>
            <param name="name">Name of this new object type. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.dropObjectType(System.String)">
            <summary>
            Remove a previously defined object type. This will also delete ALL objects of this type. This deletion is NOT reversible. 
            </summary>
            <param name="obj_type">Name of the object type to delete. This will also delete all objects that were created with the type. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.renameObjectType(System.String,System.String)">
            <summary>
            Rename a previously defined object type. 
            </summary>
            <param name="obj_type">Previous name of the object type to rename. </param>
            <param name="new_name">New name to use. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores.</param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.defineObjectProperty(System.String,System.String,System.Int32)">
            <summary>
            Add a new object property to an object type.
            </summary>
            <param name="obj_type">Object type to add a new property to. </param>
            <param name="prop_name">Name of the new property to add. This name needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="prop_type">Type of the new property: 1 for integer, 2 for string (max. 255 characters), 3 for text blob (max. 64kb)</param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.undefineObjectProperty(System.String,System.String)">
            <summary>
            Remove a previously defined property of an object type. This will remove ALL values of this property of ALL objects of this type. This removal is NOT reversible. 
            </summary>
            <param name="obj_type">Object type from which a property is removed. </param>
            <param name="prop_name">Name of the property to remove. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.renameObjectProperty(System.String,System.String,System.String)">
            <summary>
            Rename a previously defined object property. 
            </summary>
            <param name="obj_type">Object type of the property to rename. </param>
            <param name="prop_name">Name of the property to change. </param>
            <param name="new_name">	New name to use. This name needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.getObjectTypes">
            <summary>
            Get a list of all previously defined object types. 
            </summary>
            <returns>list of object type definitions, each of which has; name: name of object type; object_class: (reserved)</returns>
        </member>
        <member name="M:facebook.data.getObjectType(System.String)">
            <summary>
            Get detailed definitions of an object type, including all its properties and their types. 
            </summary>
            <param name="obj_type">Object type to get definition about. </param>
            <returns>list of object property definitions, each of which has; name: name of property; data_type: type of property. 1 for integer, 2 for string (max. 255 characters), 3 for text blob (max. 64kb); index_type: (reserved)</returns>
        </member>
        <member name="M:facebook.data.createObject(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new object.
            </summary>
            <param name="obj_type">Specifies which type of new object to create. </param>
            <param name="properties">Optional - Name-value pairs of properties this new object has. The parameters must be JSON encoded with double quoted property and value, i.e. {"name":"value"} </param>
            <returns>64-bit integer: Numeric identifier (fbid) of newly created object. </returns>
        </member>
        <member name="M:facebook.data.updateObject(System.Int64,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Update an object's properties. 
            </summary>
            <param name="obj_id">Numeric identifier (fbid) of the object to modify. </param>
            <param name="properties">Name-value pairs of new properties. </param>
            <param name="replace">True if replace all existing properties; false to merge into existing ones.</param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.deleteObject(System.Int64)">
            <summary>
            Delete an object permanently. 
            </summary>
            <param name="obj_id">Numeric identifier (fbid) of the object to delete. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.deleteObjects(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete multiple objects permanently. 
            </summary>
            <param name="obj_ids">A list of 64-bit integers that are numeric identifiers (fbids) of objects to delete.</param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.getObject(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            Get an object's properties.
            </summary>
            <param name="obj_id">Numeric identifier (fbid) of the object to query.</param>
            <param name="prop_names">Optional - A list of property names (strings) to selectively query a subset of object properties. If not specified, all properties will be returned.</param>
            <returns>An array of the values only (not the names) of specified properties of the object. </returns>
            <remarks>The second (index 1) is the object id (fbid); after that they will be properties you added yourself.</remarks>
        </member>
        <member name="M:facebook.data.getObjects(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String})">
            <summary>
            Get properties of multiple objects. 
            </summary>
            <param name="obj_ids">A list of 64-bit numeric identifiers (fbids) of objects to query. For example: [fbid1, fbid2] </param>
            <param name="prop_names">Optional - A list of property names (strings) to selectively query a subset of object properties. If not specified, all properties will be returned. </param>
            <returns>list of name-value pairs. </returns>
        </member>
        <member name="M:facebook.data.getObjectProperty(System.Int64,System.String)">
            <summary>
            Get properties of multiple objects. 
            </summary>
            <param name="obj_id">A list of 64-bit numeric identifiers (fbids) of objects to query. For example: [fbid1, fbid2] </param>
            <param name="prop_name">Optional - A list of property names (strings) to selectively query a subset of object properties. If not specified, all properties will be returned. </param>
            <returns>list of name-value pairs. </returns>
        </member>
        <member name="M:facebook.data.setObjectProperty(System.Int64,System.String,System.String)">
            <summary>
            Set a single property of an object. 
            </summary>
            <param name="obj_id">Object's numeric identifier (fbid).</param>
            <param name="prop_name">Property's name.</param>
            <param name="prop_value">Property's value.</param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.getHashValue(System.String,System.String,System.String)">
            <summary>
            Get a property value by a hash key. 
            </summary>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="key">Hash key (string object identifier) for locating the object. This is created by a call to Data.setHashValue. </param>
            <param name="prop_name">Name of the property to query. </param>
            <returns>string: property's value. Empty string will be returned (without any error), if object with the specified hash key was not found or created. </returns>
        </member>
        <member name="M:facebook.data.setHashValue(System.String,System.String,System.String,System.String)">
            <summary>
            Set a property value by a hash key. 
            </summary>
            <param name="obj_type">Object's type. This is required so that different object types can use the same hash keys for different objects. </param>
            <param name="key">Hash key. This is a unique string chosen by the user that can be used to refer to the object in subsequent function calls. </param>
            <param name="value">Property's value to set. If the hash key exists, this will overwrite any previous value. </param>
            <param name="prop_name">Name of the property to set. </param>
            <returns>64-bit integer: Numeric identifier (fbid) of the object. </returns>
        </member>
        <member name="M:facebook.data.incHashValue(System.String,System.String,System.String,System.Int32)">
            <summary>
            Atomically increases a numeric property by a hash key. This is different than "setHashValue(getHashValue() + increment)", which has two API functions calls that are not atomically done (subject to race conditions with values overwritten by interleaved API calls). 
            </summary>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="key">Hash key (string object identifier) for locating the object. </param>
            <param name="prop_name">Name of the property to set. </param>
            <param name="increment">Optional - Default is 1. Increments to add to current value, which is 0 if object was not found or created. Use negative number for decrements. </param>
            <returns>32-bit integer: property's value after incremented. </returns>
        </member>
        <member name="M:facebook.data.removeHashKey(System.String,System.String)">
            <summary>
            Delete an object by a hash key. 
            </summary>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="key">Hash key (string object identifier) to remove. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.removeHashKeys(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Delete multiple objects by a list of hash keys. 
            </summary>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="keys">A list of hash keys (string object identifier) to remove.</param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.defineAssociation(System.String,System.Int32,facebook.Schema.assoc_object_type,facebook.Schema.assoc_object_type,System.Nullable{System.Boolean})">
            <summary>
            An object association is a directional relationship between two object identifiers. For example, Application Installation: user id => installed application ids; Marriage: husband => wife; Friendship: user id => friend user id; Gift: giver => receiver 
            Each association has at least 3 names that are required to describe it: name of the association itself: "installation", "marriage", "friendship", "gift". alias1, name of the first object identifier: "user id", "husband", "giver". alias2, name of the second object identifier: "application id", "wife", "friend user id", "receiver". 
            For some associations, we also need reverse direction for a lookup by the second object identifier. For examples, in "marriage" case, not only may we need to look up wife ids by husband ids, but we may also need to look up husband ids by wife ids. We call this a two-way association. Since "husband to wife" is not the same as "wife to husband", we call this a two-way asymmetric association.
            In some other two-way associations, backward association has the same meaning of forward association. For example, in "friendship", if "A is B's friend" then "B is A's friend" as well. We call these types of two-way associations symmetric. For a symmetric association, when "A to B" is added, we also add "B to A", so that a reverse lookup can find out exactly the same information. 
            </summary>
            <param name="name">Name of forward association to create. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="assoc_type">Type of this association:
            1: one-way association, where reverse lookup is not needed;
            2: two-way symmetric association, where a backward association (B to A) is always created when a forward association (A to B) is created.
            3: two-way asymmetric association, where a backward association (B to A) has different meaning than a forward association (A to B). </param>
            <param name="assoc_info1">Describes object identifier 1 in an association. This is a data structure that has:
            alias: name of object identifier 1. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores.
            object_type: Optional - object type of object identifier 1.
            unique: Optional - Default to false. Whether each unique object identifier 1 can only appear once in all associations of this type. </param>
            <param name="assoc_info2">Describes object identifier 2 in an association. This is a data structure that has:
            alias: name of object identifier 2. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores.
            object_type: Optional - object type of object identifier 2.
            unique: Optional - Default to false. Whether each unique object identifier 2 can only appear once in all associations of this type. </param>
            <param name="inverse">Optional - name of backward association, if it is two-way asymmetric. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.undefineAssociation(System.String)">
            <summary>
            Remove a previously defined association. This will also delete this type of associations established between objects. This deletion is not reversible. 
            </summary>
            <param name="name">Name of the association to remove.</param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.renameAssociation(System.String,System.String,System.String,System.String)">
            <summary>
            Rename a previously defined association. Any renaming here only affects one direction. To change names and aliases for another direction, rename with the name of that direction of association. 
            </summary>
            <param name="name">Name of the association to change. </param>
            <param name="new_name">Optional - New name to use. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="new_alias1">Optional - New alias for object identifier 1 to use. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="new_alias2">Optional - New alias for object identifier 2 to use. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.getAssociationDefinition(System.String)">
            <summary>
            Get detailed definition of an association. 
            </summary>
            <param name="name">	Name of the association. </param>
            <returns>An object association information data structure that has:
            name: name of the association;
            * assoc_type: an integer indicating association's type:
            o 1: one-way association, where reverse lookup is not needed;
            o 2: two-way symmetric association, where a backward association (B to A) is always created when a forward association (A to B) is created.
            o 3: two-way asymmetric association, where a backward association (B to A) has different meaning than a forward association (A to B). 
            * assoc_info1: object identifier 1's information:
            o alias: name of object identifier 1.
            o object_type: Optional - object type of object identifier 1.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type. 
            * assoc_info2: object identifier 2's information:
            o alias: name of object identifier 2.
            o object_type: Optional - object type of object identifier 2.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type.
            </returns>
        </member>
        <member name="M:facebook.data.getAssociationDefinitions">
            <summary>
            Get detailed definitions of all previously defined associations. 
            </summary>
            <returns>A list of object association information data structures, each of which has: 
            name: name of the association;
            * assoc_type: an integer indicating association's type:
            o 1: one-way association, where reverse lookup is not needed;
            o 2: two-way symmetric association, where a backward association (B to A) is always created when a forward association (A to B) is created.
            o 3: two-way asymmetric association, where a backward association (B to A) has different meaning than a forward association (A to B). 
            * assoc_info1: object identifier 1's information:
            o alias: name of object identifier 1.
            o object_type: Optional - object type of object identifier 1.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type. 
            * assoc_info2: object identifier 2's information:
            o alias: name of object identifier 2.
            o object_type: Optional - object type of object identifier 2.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type.
            </returns>
        </member>
        <member name="M:facebook.data.setAssociation(System.String,System.Int64,System.Int64,System.String,System.DateTime)">
            <summary>
            Creates an association between two object identifiers. The order of these two identifiers matters, unless this is a symmetric two-way association. 
            </summary>
            <param name="name">Name of the association to set. </param>
            <param name="obj_id1">Object identifier 1. </param>
            <param name="obj_id2">Object identifier 2. </param>
            <param name="data">Optional - An arbitrary data (max. 255 characters) to store with this association. </param>
            <param name="assoc_time">Optional - Default to association creation time. A timestamp to store with this association. This timestamp is represented as number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT). </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.setAssociations(System.Collections.Generic.IList{facebook.DataAssociation},System.String)">
            <summary>
            Creates a list of associations. 
            </summary>
            <param name="assocs">A list of associations to set. Each of them has:
            * name: string, optional - name of the association to set;
            * id1: int64, object identifier 1;
            * id2: int64, object identifier 2;
            * data: string, optional - an arbitrary data (max. 255 characters) to store with this association.
            * time: integer, optional - default to association creation time. A timestamp to store with this association. This timestamp is represented as number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT). </param>
            <param name="name">Optional - default association name if association name is not specified in the list. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.removeAssociation(System.String,System.Int64,System.Int64)">
            <summary>
            Removes an association between two object identifiers. The order of these two identifiers matters, unless this is a symmetric two-way association. 
            </summary>
            <param name="name">Name of the association. </param>
            <param name="obj_id1">Object identifier 1. </param>
            <param name="obj_id2">Object identifier 2. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.removeAssociations(System.Collections.Generic.List{facebook.DataAssociation},System.String)">
            <summary>
            Removes a list of associations. 
            </summary>
            <param name="assocs">A list of associations to remove. Each of them has:
            * name: string, optional - name of the association;
            * id1: int64, object identifier 1;
            * id2: int64, object identifier 2; </param>
            <param name="name">Optional - default association name if association name is not specified in the list. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.removeAssociatedObjects(System.String,System.Int64)">
            <summary>
            The name of this function may be misleading, but it actually removes associations between any other objects and a specified object. Those other associated objects will NOT be removed or deleted. Only the associations will be broken and deleted. 
            </summary>
            <param name="name">Name of the association. </param>
            <param name="obj_id">Object identifier. </param>
            <returns>Empty response if succesful, error otherwise.</returns>
        </member>
        <member name="M:facebook.data.getAssociatedObjects(System.String,System.Int64,System.Boolean)">
            <summary>
            Returns a list of object ids that are associated with specified object. 
            </summary>
            <param name="name">Name of the association. </param>
            <param name="obj_id">Object identifier. </param>
            <param name="no_data">True if only return object identifiers; false to return data and time as well. </param>
            <returns>A list of objects associated with the given id, each of which has:
            * id2: object identifier 2;
            * data: arbitrary data stored with this association; and
            * time: association creation time or a timestamp stored with this association. </returns>
        </member>
        <member name="M:facebook.data.getAssociatedObjectCount(System.String,System.Int64)">
            <summary>
            Returns count of object ids that are associated with specified object. This function takes constant time to return the count, regardless how many objects are associated. 
            </summary>
            <param name="name">Name of the association. </param>
            <param name="obj_id">Object identifier. </param>
            <returns>integer: count of associated objects of the specified object. Seems to be returning empty string for zero. </returns>
        </member>
        <member name="M:facebook.data.getAssociatedObjectCounts(System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns individual counts of object ids that are associated with a list of specified objects. This function takes constant time to return the counts, regardless how many objects are associated with each queried object. 
            </summary>
            <param name="name">	Name of the association. </param>
            <param name="obj_ids">A list of 64-bit numeric object identifiers. </param>
            <returns>A list of integers, each of which is count of associated objects of one object in the specified list. The order of counts match exactly with input list. </returns>
        </member>
        <member name="M:facebook.data.getAssociations(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Get all associations between two object identifiers. 
            </summary>
            <param name="obj_id1">Object identifier 1. </param>
            <param name="obj_id2">Object identifier 2. </param>
            <param name="no_data">True if only return object identifiers; false to return data and time as well. </param>
            <returns>A list of associations, each of which has:
            * name: name of the association to set;
            * id1: object identifier 1;
            * id2: object identifier 2;
            * data: arbitrary information stored with this association; and
            * time: association creation time or a timestamp that was stored with this association. </returns>
        </member>
        <member name="M:facebook.data.getCookies">
            <summary>
            Get All Cookies for the logged user. 
            </summary>
            <returns>A list of cookies</returns>
        </member>
        <member name="M:facebook.data.getCookies(System.Int64)">
            <summary>
            Get All Cookies for the logged user. 
            </summary>
            <param name="uid">User id </param>
            <param name="no_data">True if only return object identifiers; false to return data and time as well. </param>
            <returns>A list of cookies</returns>
        </member>
        <member name="M:facebook.data.getCookies(System.Int64,System.String)">
            <summary>
            Get Cookies for the specified user. 
            </summary>
            <param name="uid">User id </param>
            <param name="cookieName">Optional- Cookie name </param>
            <returns>A list of cookies</returns>
        </member>
        <member name="M:facebook.data.setCookie(System.Int64,System.String,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Get Cookies for the specified user. 
            </summary>
            <param name="uid">User id </param>
            <param name="cookieName">Cookie name </param>
            <param name="value">cookie value </param>
            <param name="expires">Time stamp when the cookie should expire. If not specified, the cookie expires after 24 hours. (The time stamp can be longer than 24 hours and currently has no limit)</param>
            <param name="path">Path relative to the application's callback URL, with which the cookie should be associated. (default value is /) </param>
            <returns>true or false</returns>
        </member>
        <member name="T:facebook.map">
            <summary>
            Id-value pairs
            </summary>
        </member>
        <member name="T:facebook.DataAssociation">
            <summary>
            Id-value pairs
            </summary>
        </member>
        <member name="P:facebook.DataAssociation.name">
            <summary>
            Name of the association to set. 
            </summary>
        </member>
        <member name="P:facebook.DataAssociation.id1">
            <summary>
            Object identifier 1. 
            </summary>
        </member>
        <member name="P:facebook.DataAssociation.id2">
            <summary>
            Object identifier 2.
            </summary>
        </member>
        <member name="P:facebook.DataAssociation.data">
            <summary>
            Optional - An arbitrary data (max. 255 characters) to store with this association. 
            </summary>
        </member>
        <member name="P:facebook.DataAssociation.assoc_time">
            <summary>
            Optional - Default to association creation time. A timestamp to store with this association. 
            </summary>
        </member>
        <member name="T:facebook.Components.FacebookService">
            <summary>
            
            </summary>
        </member>
        <member name="F:facebook.Components.FacebookService.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:facebook.Components.FacebookService.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:facebook.Components.FacebookService.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:facebook.Components.FacebookService.ExtendedPermissionUrl(facebook.Types.Enums.Extended_Permissions)">
            <summary>
            Constructs the URL to use to redirect a user to enable a given extended permission for your application.
            </summary>
            <param name="permission">The specific permission to enable.</param>
            <returns>The URL to redirect users to.</returns>
        </member>
        <member name="M:facebook.Components.FacebookService.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:facebook.Components.FacebookService.#ctor(System.ComponentModel.IContainer)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:facebook.Components.FacebookService.ConnectToFacebook">
            <summary>
            Displays an integrated browser to allow the user to log on to the
            Facebook web page.
            </summary>
        </member>
        <member name="M:facebook.Components.FacebookService.CreateSession(System.String)">
            <summary>
            Creates a new session with Facebook.
            </summary>
            <param name="authToken">The auth token to use to create the session.</param>
        </member>
        <member name="M:facebook.Components.FacebookService.GetExtendedPermission(facebook.Types.Enums.Extended_Permissions)">
            <summary>
            Displays an integrated browser to allow the user to log on to the
            Facebook web page.
            </summary>
        </member>
        <member name="M:facebook.Components.FacebookService.LogOff">
            <summary>
            
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.marketplace">
            <summary>
            An object used to call various marketplace-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.photos">
            <summary>
            An object used to call various photo-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.users">
            <summary>
            An object used to call various user-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.friends">
            <summary>
            An object used to call various friend-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.events">
            <summary>
            An object used to call various event-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.groups">
            <summary>
            An object used to call various group-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.admin">
            <summary>
            An object used to call various admin-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.profile">
            <summary>
            An object used to call various profile-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.notifications">
            <summary>
            An object used to call various notification-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.fbml">
            <summary>
            An object used to call various FBML-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.feed">
            <summary>
            An object used to call various feed-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.fql">
            <summary>
            An object used to call various FQL-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.liveMessage">
            <summary>
            An object used to call various live message-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.batch">
            <summary>
            An object used to call various batch-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.pages">
            <summary>
            An object used to call various page-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.application">
            <summary>
            An object used to call various application-related methods in Facebook's API.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.ApplicationKey">
            <summary>
            The application key for your application.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.API">
            <summary>
            The underlying API client object to use to communicate with Facebook.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.Secret">
            <summary>
            The secret for your Facebook application.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.uid">
            <summary>
            The Facebook ID of the current user.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.SessionKey">
            <summary>
            The current session key to use.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.SessionExpires">
            <summary>
            Whether or not the session expires.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.LoginUrl">
            <summary>
            The URL used to login to Facebok. Constructed using the application key, auth token, and a URL template.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.LogOffUrl">
            <summary>
            The URL used to log off of Facebook. Constructed using the application key, auth token, and a URL template.
            </summary>
        </member>
        <member name="P:facebook.Components.FacebookService.IsDesktopApplication">
            <summary>
            Whether or not the current application is a desktop application.
            </summary>
        </member>
        <member name="T:facebook.marketplace">
            <summary>
            Facebook marketplace api methods.
            </summary>
        </member>
        <member name="M:facebook.marketplace.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.marketplace
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.marketplace.getCategories">
            <summary>
            Returns all the Marketplace categories. 
            </summary>
            <returns>This method returns a list of categories for use in Marketplace.</returns>
        </member>
        <member name="M:facebook.marketplace.getSubCategories(System.String)">
            <summary>
            Returns the Marketplace subcategories for a particular category.
            </summary>
            <param name="category">Filter by category. If this is not a valid category, no subcategories get returned.</param>
            <returns>A list of subcategories for use in Marketplace. </returns>
        </member>
        <member name="M:facebook.marketplace.getListings(System.Collections.Generic.List{System.Int64},System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Return all Marketplace listings either by listing ID or by user. 
            </summary>
            /// <param name="uids">Filter by a list of users. If you leave this blank, then the list is filtered only for listing IDs.</param>
            <param name="listing_ids">Filter by listing IDs. If you leave this blank, then the list is filtered only for user IDs.</param>
            <returns>This method returns all visible listings matching the criteria given. If no matching listings are found, the method returns an empty element.</returns>
        </member>
        <member name="M:facebook.marketplace.search(System.String,System.String,System.String)">
            <summary>
            Will search the logged in users's networks for listings matching the category, subcategory, and query provided.
            </summary>
            <param name="category">Optional - the category to restirct search to, as returned by getCategories.</param>
            <param name="subcategory">Optional - the subcategory to restrict search to, as returned by getSubcategories. If a subcategory is provided, a category is also necessary.</param>
            <param name="query">Optional - the textual query to search the listings data.</param>
            <returns>Marketplace listings.</returns>
        </member>
        <member name="M:facebook.marketplace.createListing(System.Int64,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates or modifies a listing in Marketplace. You may only create and modify a listing for a user 
            who has granted the application the extended permission create_listing.  
            </summary>
            <param name="listing_id">The listing ID to modify, or 0 if the user is creating a new listing.</param>
            <param name="show_on_profile">A privacy control indicating whether to display the listing on the poster's profile.</param>
            <param name="listing_attrs">Collection of Marketplace Listing Attributes.</param>
            <returns>This method returns the listing ID of the modified/created listing. If you are modifying a listing, it is the same as the listing ID provided to the method.</returns>
        </member>
        <member name="M:facebook.marketplace.removeListing(System.Int64,System.String)">
            <summary>
            Remove a Marketplace listing.
            </summary>
            <param name="listing_id">The listing ID to remove.</param>
            <param name="status">Removal status for tracking whether a Marketplace listing resulted in a successful transaction: "SUCCESS", "NOT_SUCCESS", or "DEFAULT".</param>
            <returns>True on success, error on failure. </returns>
            <remarks>The listing must be owned by loggedinuser.</remarks>
        </member>
        <member name="T:facebook.admin">
            <summary>
            Facebook admin api methods.
            </summary>
        </member>
        <member name="F:facebook.admin._api">
            <summary>
            
            </summary>
        </member>
        <member name="M:facebook.admin.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.admin
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.admin.getMetrics(System.DateTime,System.DateTime,facebook.admin.Period)">
            <summary>
            Gets various metrics for your application from Facebook.
            </summary>
            <param name="startDate">The start of the time span to get metrics for.</param>
            <param name="endDate">The end of the time span to get metrics for.</param>
            <param name="period">The type of time period for which metrics were collected.</param>
            <returns></returns>
        </member>
        <member name="M:facebook.admin.getMetrics(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,facebook.admin.Period)">
            <summary>
            Returns specified daily metrics for your application, given a date range. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:facebook.admin.getAllocation(facebook.admin.IntegrationPointName)">
            <summary>
            Returns the current allocation limits for your application for the specified integration points. Allocation limits are determined daily.
            </summary>
            <returns>The requested allocation</returns>
        </member>
        <member name="M:facebook.admin.setAppProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the current allocation limits for your application for the specified integration points. Allocation limits are determined daily.
            </summary>
            <returns>The requested allocation</returns>
        </member>
        <member name="M:facebook.admin.getAppProperties(System.Collections.Generic.List{System.String})">
            <summary>
            Returns the current allocation limits for your application for the specified integration points. Allocation limits are determined daily.
            </summary>
            <returns>The requested allocation</returns>
        </member>
        <member name="T:facebook.admin.Period">
            <summary>
            The type of period over which metrics are collected.
            </summary>
        </member>
        <member name="T:facebook.photos">
            <summary>
            
            </summary>
        </member>
        <member name="M:facebook.photos.#ctor(facebook.API)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:facebook.photos.addTag(System.Int64,System.Int64,System.String,System.Single,System.Single)">
            <summary>
            Adds a tag with the given information to a photo. See photo uploads for a description of the upload workflow.
            </summary>
            <param name="pid">The photo id of the photo to be tagged.</param>
            <param name="tag_uid">The user id of the user being tagged. Either tag_uid or tag_text must be specified.</param>
            <param name="tag_text">Some text identifying the person being tagged. Either tag_uid or tag_text must be specified. This parameter is ignored if tag_uid is specified.</param>
            <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
            <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
            <param name="tags">A JSON-serialized array representing a list of tags to be added to the photo. If the tags parameter is specified, the x, y, tag_uid, and tag_text parameters are ignored. Each tag in the list must specify: "x", "y", and either the user id "tag_uid" or free-form "tag_text" identifying the person being tagged. An example of this is the string [{"x":"30.0","y":"30.0","tag_uid":1234567890}, {"x":"70.0","y":"70.0","tag_text":"some person"}].</param>
            <returns>True if successful, otherwise an error.</returns>
            <remarks>Tags can only be added to pending photos owned by the current session user. Once a photo has been approved or rejected, it can no longer be tagged with this method. There is a limit of 20 tags per pending photo.</remarks>
        </member>
        <member name="M:facebook.photos.createAlbum(System.String,System.String,System.String)">
            <summary>
            Creates and returns a new album owned by the current session user. See photo uploads for a description of the upload workflow. The only storable values returned from this call are aid and owner.
            </summary>
            <param name="name">The album name.</param>
            <param name="location">Optional - The album location.</param>
            <param name="description">Optional - The album description.</param>
            <returns>A new album owned by the current session user</returns>
            <remarks>The returned cover_pid is always 0.</remarks>
        </member>
        <member name="M:facebook.photos.get(System.String,System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns all visible photos according to the filters specified. This may be used to find all photos in which a user is tagged, return photos in a specific album, or to query specific pids.
            </summary>
            <param name="subj_id">Filter by photos tagged with this user.</param>
            <param name="aid">Filter by photos in this album.</param>
            <param name="pids">Filter by photos in this list. This is a comma-separated list of pids.</param>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photos tagged with user, in an album, query a specific set of photos by a list of pids, or filter on any combination of these three.</returns>
            <remarks>It is an error to omit all three of the subj_id, aid, and pids parameters. They have no defaults.</remarks>
        </member>
        <member name="M:facebook.photos.getAlbums(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user. The values returned from this call are not storable.
            </summary>
            <param name="uid">Optional - Return albums created by this user.</param>
            <param name="aids">Optional - Return albums with aids in this list. This is a comma-separated list of pids.</param>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:facebook.photos.getTags(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns the set of user tags on all photos specified.
            </summary>
            <param name="pids">The list of photos from which to extract photo tags. This is a comma-separated list of pids.</param>
            <returns>If no photo tags are found, the method will return an empty photos_getTags_response element. Text tags not corresponding to a user are not currently returned. Some tags may be text-only and will have an empty subect element. This occurs in the case where a user did not specifically tag another account, but just supplied text information.</returns>
            <remarks> A tag of a user will be visible to an application only if that user has not turned off access to the Facebook Platform.</remarks>
        </member>
        <member name="M:facebook.photos.upload(System.Int64,System.String,System.IO.FileInfo)">
            <summary>
            Uploads a photo owned by the current session user and returns the new photo. See photo uploads for a description of the upload workflow. The only storable values returned from this call are pid, aid, and owner.
            </summary>
            <param name="aid">Optional - The album id of the destination album.</param>
            <param name="caption">Optional - The caption of the photo.</param>
            <param name="data">The raw image data for the photo.</param>
            <returns>Photo information, including the photo URL.</returns>
            <remarks>If no album is specified, the photo will be uploaded to a default album for the application, which will be created if necessary. Regular albums have a size limit of 60 photos. Default application albums have a size limit of 1000 photos. It is strongly recommended that you scale the image in your application before adding it to the request. The largest dimension should be at most 604 pixels (the largest display size Facebook supports).</remarks>
        </member>
        <member name="M:facebook.photos.getAlbums">
            <summary>
            Returns metadata about all of the photo albums uploaded by the current user. The values returned from this call are not storable.
            </summary>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:facebook.photos.getAlbums(System.Int64)">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user. The values returned from this call are not storable.
            </summary>
            <param name="uid">Optional - Return albums created by this user.</param>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:facebook.photos.getAlbums(System.Nullable{System.Int64})">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user. The values returned from this call are not storable.
            </summary>
            <param name="uid">Optional - Return albums created by this user.</param>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:facebook.photos.getAlbums(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns metadata about all of the photo albums with the following ids. The values returned from this call are not storable.
            </summary>
            <param name="aids">Return albums with aids in this list. This is a comma-separated list of pids.</param>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="T:facebook.pages">
            <summary>
            Facebook application api methods.
            </summary>
        </member>
        <member name="M:facebook.pages.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.auth
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.pages.getInfo(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Returns all visible pages to the filters specified. This may be used to find all pages of which a user is a fan, or to query specific page_ids. The session_key parameter is optional. When the session_key parameter is not passed, you can only get information for pages that have added your application. The uid parameter is not even considered. With a session_key, normal privacy rules are put into place. 
            </summary>
            <param name="fields">List of desired fields in return. This is a comma-separated list of field strings. </param>
            <param name="page_ids">List of page IDs. This is a comma-separated list of page IDs. </param>
            <param name="uid">The ID of the user. Defaults to the logged in user if the session_key is valid, and no page_ids are passed. Used to get the pages a given user is a fan of.</param>
            <returns>The page info elements returned are those visible to the Facebook Platform.</returns>
        </member>
        <member name="M:facebook.pages.isAppAdded(System.Int64)">
            <summary>
            Checks whether the page has added the application. 
            </summary>
            <param name="page_id">The id of the page </param>
            <returns>True or False</returns>
        </member>
        <member name="M:facebook.pages.isAdmin(System.Int64)">
            <summary>
            Checks whether the logged-in user is the admin for a given page. 
            </summary>
            <param name="page_id">The id of the page </param>
            <returns>True or False</returns>
        </member>
        <member name="M:facebook.pages.isFan(System.Int64)">
            <summary>
            Checks whether a user is a fan of a given Page. Doesn't work for Application about Pages.
            </summary>
            <param name="page_id">The id of the page </param>
            <param name="uid">The id of the page </param>
            <returns>True or False</returns>
        </member>
        <member name="M:facebook.pages.isFan(System.Int64,System.Int64)">
            <summary>
            Checks whether a user is a fan of a given Page. Doesn't work for Application about Pages.
            </summary>
            <param name="page_id">The id of the page </param>
            <param name="uid">The id of the page </param>
            <returns>True or False</returns>
        </member>
        <member name="T:facebook.permissions">
            <summary>
            Facebook permissions api methods.
            </summary>
        </member>
        <member name="M:facebook.permissions.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.permissions
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.permissions.grantApiAccess(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            This method gives another application access to certain API calls on behalf of the application calling it. The application granted access is specified by permissions_apikey. Which methods or namespaces can be called are specified in method_arr.
            </summary>
            <param name="method_arr">JSON array of methods and/or namespaces for which the access is granted. If this is not specified, access to all allowed methods is granted.</param>
            <returns>The method returns a bool value indicating whether the call succeeded or failed. </returns>
            <remarks>The only namespace that can be granted access at this time is admin. </remarks>
        </member>
        <member name="M:facebook.permissions.checkAvailableApiAccess(System.String)">
            <summary>
            This method returns the API methods to which access has been granted by the specified application. 
            </summary>
            <param name="permissions_apikey">The API key of the application for which the check is being done.</param>
            <returns>The method returns an array of strings listing all methods/namespaces for which access is available.</returns>
        </member>
        <member name="M:facebook.permissions.revokeApiAccess(System.String)">
            <summary>
            This method revokes the API access granted to the specified application. 
            </summary>
            <param name="permissions_apikey">The API key for the target application. </param>
            <returns>The method returns a bool value indicating whether the call succeeded or failed. </returns>
        </member>
        <member name="M:facebook.permissions.checkGrantedApiAccess(System.String)">
            <summary>
            This method returns the API methods to which the specified application has been given access. 
            </summary>
            <param name="permissions_apikey">The API key of the application for which the check is being done. </param>
            <returns>The method returns an array of strings listing all methods/namespaces for which access has been granted. </returns>
        </member>
        <member name="M:facebook.Utility.JSONHelper.EscapeJsonString(System.String)">
            <summary>
            Escape backslashes and double quotes
            </summary>
            <param name="originalString">string</param>
            <returns>string</returns>
        </member>
        <member name="T:facebook.API">
            <summary>
            Provides various methods to use the Facebook Platform API.
            </summary>
        </member>
        <member name="M:facebook.API.SetAuthenticationToken">
            <summary>
            Creates and sets a new authentication token.
            </summary>
        </member>
        <member name="M:facebook.API.ConnectToFacebook">
            <summary>
            Displays an integrated browser to allow the user to log on to the
            Facebook web page.
            </summary>
        </member>
        <member name="M:facebook.API.CreateSession(System.String)">
            <summary>
            Creates a new session with Facebook.
            </summary>
            <param name="authToken">The auth token received from Facebook.</param>
        </member>
        <member name="M:facebook.API.LogOff">
            <summary>
            Forgets all connection information so that this object may be used for another connection.
            </summary>
        </member>
        <member name="M:facebook.API.SendRequest(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sends a request through the REST API to Facebook. This is what the other methods all use to communicate with Facebook.
            You should only use this method if you need to call a method that is not defined in this toolkit. Note that this method
            will always use the session key in the request.
            </summary>
            <param name="parameterDictionary">
            A dictionary of parameters for the method being called, as specified in the documentation for the method. You will need
            to make sure to have a parameter named "method" corresponding to the method name. Note that the toolkit will populate
            the api_key, call_id, sig, v, and session_key parameters.
            </param>
            <returns>The XML response returned by Facebook.</returns>
        </member>
        <member name="M:facebook.API.SendRequest(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Sends a request through the REST API to Facebook. This is what the other methods all use to communicate with Facebook.
            You should only use this method if you need to call a method that is not defined in this toolkit.
            </summary>
            <param name="parameterDictionary">
            A dictionary of parameters for the method being called, as specified in the documentation for the method. You will need
            to make sure to have a parameter named "method" corresponding to the method name. Note that the toolkit will populate
            the api_key, call_id, sig, v, and session_key parameters.
            </param>
            <param name="useSession">Whether or not to use the session key in the request.</param>
            <returns>The XML response returned by Facebook.</returns>
        </member>
        <member name="M:facebook.API.GenerateSignature(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This method generates the signature based on parameters supplied
            </summary>
            <param name="parameters">List of paramenters</param>
            <returns>Generated signature</returns>
        </member>
        <member name="M:facebook.API.GetFileQueryResponse(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.IO.FileSystemInfo)">
            <summary>
            Get File Query Response
            </summary>
            <param name="parameterDictionary">parameter list</param>
            <param name="uploadFile">uploaded file info</param>
            <returns>Response data</returns>
        </member>
        <member name="P:facebook.API.SessionExpires">
            <summary>
            Whether or not the session expires
            </summary>
        </member>
        <member name="P:facebook.API.IsDesktopApplication">
            <summary>
            Whether or not this component is being used in a desktop application
            </summary>
        </member>
        <member name="P:facebook.API.Secret">
            <summary>
            Secret word
            </summary>
        </member>
        <member name="P:facebook.API.SessionKey">
            <summary>
            Session key
            </summary>
        </member>
        <member name="P:facebook.API.uid">
            <summary>
            User Id
            </summary>
        </member>
        <member name="P:facebook.API.AuthToken">
            <summary>
            Authorization token
            </summary>
        </member>
        <member name="T:facebook.auth">
            <summary>
            Facebook auth api methods.
            </summary>
        </member>
        <member name="M:facebook.auth.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.auth
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.auth.createToken">
            <summary>
            (Intended for desktop applications only.) Creates an auth_token to be passed in as a parameter to login.php and then to facebook.auth.getSession after the user has logged in. The user must log in soon after you create this token. See the facebook authentication guide for more information.
            </summary>
            <returns>Authentication token Guid.</returns>
            <remarks>That this function does not require a session_key or call_id (although specifying a call_id will not cause any problems). The values returned from this call are storable, but expire on their first use in facebook.auth.getSession.</remarks>
        </member>
        <member name="M:facebook.auth.getSession">
            <summary>
            Returns the session key bound to an auth_token (as returned by facebook.auth.createToken or in the callback_url). Should be called immediately after the user has logged in. See the facebook authentication guide for more information.
            </summary>
            <returns>If the user has successfully logged in, this will return valid values for each field. The expires element is a Unix time that indicates when the given session will expire. If the value is 0, the session will never expire. See the authentication guide for more information.</returns>
            <remarks>For desktop applications this method must be called at the https endpoint instead of the http endpoint, and its return value is slightly different (as noted below). Also, this function does not require a session_key or call_id (although specifying a call_id will not cause any problems). The session key is storable for the duration of the session, and the uid is storable indefinitely. For desktop applications, the top-level element will have an additional element named secret that should be used as the session's secret key as described in the facebook authentication guide.</remarks>
        </member>
        <member name="M:facebook.auth.getSession(System.String)">
            <summary>
            Returns the session key bound to an auth_token (as returned by facebook.auth.createToken or in the callback_url). Should be called immediately after the user has logged in. See the facebook authentication guide for more information.
            </summary>
            <param name="auth_token"></param>
            <returns>If the user has successfully logged in, this will return valid values for each field. The expires element is a Unix time that indicates when the given session will expire. If the value is 0, the session will never expire. See the authentication guide for more information.</returns>
            <remarks>For desktop applications this method must be called at the https endpoint instead of the http endpoint, and its return value is slightly different (as noted below). Also, this function does not require a session_key or call_id (although specifying a call_id will not cause any problems). The session key is storable for the duration of the session, and the uid is storable indefinitely. For desktop applications, the top-level element will have an additional element named secret that should be used as the session's secret key as described in the facebook authentication guide.</remarks>
        </member>
        <member name="M:facebook.auth.expireSession">
            <summary>
            Invalidates the current session being used, regardless of whether it is temporary or infinite. After successfully calling this function, no further API calls requiring a session will succeed using this session.
            </summary>
            <returns>If the invalidation is successful, this will return true.</returns>
        </member>
        <member name="M:facebook.auth.revokeAuthorization">
            <summary>
            If this method is called for the logged in user, then no further API calls can be made on that user's behalf until the user decides to authorize the application again. 
            </summary>
            <returns>If the revoke is successful, this will return true.</returns>
        </member>
        <member name="M:facebook.auth.promoteSession">
            <summary>
            Creates a temporary session secret for the current (non-infinite) session of a Web application. This session secret will not be used in the signature for the server-side component of an application, it is only meant for use by applications which additionally want to use a client side component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:facebook.Utility.StringHelper.ConvertToCommaSeparated(System.Collections.Generic.IList{System.String})">
            <summary>
            Convert a collection of strings to a comma separated list.
            </summary>
            <param name="collection">The collection to convert to a comma separated list.</param>
            <returns>comma separated string.</returns>
        </member>
        <member name="M:facebook.Utility.StringHelper.ConvertToCommaSeparated(System.Collections.Generic.IList{System.Nullable{System.Int32}})">
            <summary>
            Convert a collection of strings to a comma separated list.
            </summary>
            <param name="collection">The collection to convert to a comma separated list.</param>
            <returns>comma separated string.</returns>
        </member>
        <member name="M:facebook.Utility.StringHelper.ConvertToCommaSeparated(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Convert a collection of strings to a comma separated list.
            </summary>
            <param name="collection">The collection to convert to a comma separated list.</param>
            <returns>comma separated string.</returns>
        </member>
        <member name="F:facebook.Forms.RequestSelection.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:facebook.Forms.RequestSelection.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:facebook.Forms.RequestSelection.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:facebook.Schema.connect_registerUsers_response">
            <summary>
            <para>
            Regular expression: (connect_registerUsers_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.connect_registerUsers_response.#ctor">
            <summary>
            <para>
            Regular expression: (connect_registerUsers_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.connect_registerUsers_response.connect_registerUsers_response_elt">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (connect_registerUsers_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.connect_registerUsers_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.connect_unregisterUsers_response">
            <summary>
            <para>
            Regular expression: (connect_unregisterUsers_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.connect_unregisterUsers_response.#ctor">
            <summary>
            <para>
            Regular expression: (connect_unregisterUsers_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.connect_unregisterUsers_response.connect_unregisterUsers_response_elt">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (connect_unregisterUsers_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.connect_unregisterUsers_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.events_get_response">
            <summary>
            <para>
            Regular expression: (facebookevent*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.events_get_response.#ctor">
            <summary>
            <para>
            Regular expression: (facebookevent*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.events_get_response.facebookevent">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (facebookevent*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.events_get_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.friends_areFriends_response">
            <summary>
            <para>
            Regular expression: (friend_info*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.friends_areFriends_response.#ctor">
            <summary>
            <para>
            Regular expression: (friend_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friends_areFriends_response.friend_info">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (friend_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friends_areFriends_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.friends_get_response">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.friends_get_response.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friends_get_response.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friends_get_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.friends_getAppUsers_response">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.friends_getAppUsers_response.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friends_getAppUsers_response.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friends_getAppUsers_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.friends_getLists_response">
            <summary>
            <para>
            Regular expression: (friendlist*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.friends_getLists_response.#ctor">
            <summary>
            <para>
            Regular expression: (friendlist*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friends_getLists_response.friendlist">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (friendlist*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friends_getLists_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.groups_get_response">
            <summary>
            <para>
            Regular expression: (group*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.groups_get_response.#ctor">
            <summary>
            <para>
            Regular expression: (group*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.groups_get_response.group">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (group*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.groups_get_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.privacy_canSee_response">
            <summary>
            <para>
            Regular expression: (privacy_canSee_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.privacy_canSee_response.#ctor">
            <summary>
            <para>
            Regular expression: (privacy_canSee_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.privacy_canSee_response.privacy_canSee_response_elt">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (privacy_canSee_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.privacy_canSee_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.data_getCookies_response">
            <summary>
            <para>
            Regular expression: (cookie*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.data_getCookies_response.#ctor">
            <summary>
            <para>
            Regular expression: (cookie*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getCookies_response.cookie">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (cookie*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getCookies_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.permissions_checkGrantedApiAccess_response">
            <summary>
            <para>
            Regular expression: (permissions_checkGrantedApiAccess_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.permissions_checkGrantedApiAccess_response.#ctor">
            <summary>
            <para>
            Regular expression: (permissions_checkGrantedApiAccess_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.permissions_checkGrantedApiAccess_response.permissions_checkGrantedApiAccess_response_elt">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (permissions_checkGrantedApiAccess_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.permissions_checkGrantedApiAccess_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.permissions_checkAvailableApiAccess_response">
            <summary>
            <para>
            Regular expression: (permissions_checkAvailableApiAccess_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.permissions_checkAvailableApiAccess_response.#ctor">
            <summary>
            <para>
            Regular expression: (permissions_checkAvailableApiAccess_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.permissions_checkAvailableApiAccess_response.permissions_checkAvailableApiAccess_response_elt">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (permissions_checkAvailableApiAccess_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.permissions_checkAvailableApiAccess_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.fbpayments_getOrders_response">
            <summary>
            <para>
            Regular expression: (fbpayments_getOrders_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.fbpayments_getOrders_response.#ctor">
            <summary>
            <para>
            Regular expression: (fbpayments_getOrders_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.fbpayments_getOrders_response.fbpayments_getOrders_response_elt">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (fbpayments_getOrders_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.fbpayments_getOrders_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.marketplace_getCategories_response">
            <summary>
            <para>
            Regular expression: (marketplace_category*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.marketplace_getCategories_response.#ctor">
            <summary>
            <para>
            Regular expression: (marketplace_category*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.marketplace_getCategories_response.marketplace_category">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (marketplace_category*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.marketplace_getCategories_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.marketplace_getSubCategories_response">
            <summary>
            <para>
            Regular expression: (marketplace_subcategory*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.marketplace_getSubCategories_response.#ctor">
            <summary>
            <para>
            Regular expression: (marketplace_subcategory*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.marketplace_getSubCategories_response.marketplace_subcategory">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (marketplace_subcategory*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.marketplace_getSubCategories_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.marketplace_getListings_response">
            <summary>
            <para>
            Regular expression: (listing*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.marketplace_getListings_response.#ctor">
            <summary>
            <para>
            Regular expression: (listing*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.marketplace_getListings_response.listing">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (listing*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.marketplace_getListings_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.marketplace_search_response">
            <summary>
            <para>
            Regular expression: (listing*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.marketplace_search_response.#ctor">
            <summary>
            <para>
            Regular expression: (listing*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.marketplace_search_response.listing">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (listing*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.marketplace_search_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.photos_get_response">
            <summary>
            <para>
            Regular expression: (photo*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.photos_get_response.#ctor">
            <summary>
            <para>
            Regular expression: (photo*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_get_response.photo">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (photo*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_get_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.photos_getAlbums_response">
            <summary>
            <para>
            Regular expression: (album*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.photos_getAlbums_response.#ctor">
            <summary>
            <para>
            Regular expression: (album*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_getAlbums_response.album">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (album*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_getAlbums_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.photos_getTags_response">
            <summary>
            <para>
            Regular expression: (photo_tag*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.photos_getTags_response.#ctor">
            <summary>
            <para>
            Regular expression: (photo_tag*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_getTags_response.photo_tag">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (photo_tag*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_getTags_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.update_decodeIDs_response">
            <summary>
            <para>
            Regular expression: (id_map*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.update_decodeIDs_response.#ctor">
            <summary>
            <para>
            Regular expression: (id_map*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.update_decodeIDs_response.id_map">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (id_map*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.update_decodeIDs_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.users_getInfo_response">
            <summary>
            <para>
            Regular expression: (user*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.users_getInfo_response.#ctor">
            <summary>
            <para>
            Regular expression: (user*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.users_getInfo_response.user">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (user*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.users_getInfo_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.users_getStandardInfo_response">
            <summary>
            <para>
            Regular expression: (user*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.users_getStandardInfo_response.#ctor">
            <summary>
            <para>
            Regular expression: (user*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.users_getStandardInfo_response.user">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (user*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.users_getStandardInfo_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.pages_getInfo_response">
            <summary>
            <para>
            Regular expression: (page*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.pages_getInfo_response.#ctor">
            <summary>
            <para>
            Regular expression: (page*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.pages_getInfo_response.page">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (page*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.pages_getInfo_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.data_getUserPreferences_response">
            <summary>
            <para>
            Regular expression: (preference*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.data_getUserPreferences_response.#ctor">
            <summary>
            <para>
            Regular expression: (preference*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getUserPreferences_response.preference">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (preference*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getUserPreferences_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.data_getObjectTypes_response">
            <summary>
            <para>
            Regular expression: (object_type_info*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.data_getObjectTypes_response.#ctor">
            <summary>
            <para>
            Regular expression: (object_type_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getObjectTypes_response.object_type_info">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (object_type_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getObjectTypes_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.data_getObjectType_response">
            <summary>
            <para>
            Regular expression: (object_property_info*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.data_getObjectType_response.#ctor">
            <summary>
            <para>
            Regular expression: (object_property_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getObjectType_response.object_property_info">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (object_property_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getObjectType_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.data_getObjects_response">
            <summary>
            <para>
            Regular expression: (container*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.data_getObjects_response.#ctor">
            <summary>
            <para>
            Regular expression: (container*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getObjects_response.container">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (container*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getObjects_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.data_getAssociationDefinitions_response">
            <summary>
            <para>
            Regular expression: (object_assoc_info*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.data_getAssociationDefinitions_response.#ctor">
            <summary>
            <para>
            Regular expression: (object_assoc_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociationDefinitions_response.object_assoc_info">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (object_assoc_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociationDefinitions_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.data_getAssociatedObjects_response">
            <summary>
            <para>
            Regular expression: (object_association*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.data_getAssociatedObjects_response.#ctor">
            <summary>
            <para>
            Regular expression: (object_association*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociatedObjects_response.object_association">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (object_association*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociatedObjects_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.data_getAssociatedObjectCounts_response">
            <summary>
            <para>
            Regular expression: (data_getAssociatedObjectCounts_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.data_getAssociatedObjectCounts_response.#ctor">
            <summary>
            <para>
            Regular expression: (data_getAssociatedObjectCounts_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociatedObjectCounts_response.data_getAssociatedObjectCounts_response_elt">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (data_getAssociatedObjectCounts_response_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociatedObjectCounts_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.data_getAssociations_response">
            <summary>
            <para>
            Regular expression: (object_association*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.data_getAssociations_response.#ctor">
            <summary>
            <para>
            Regular expression: (object_association*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociations_response.object_association">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (object_association*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociations_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.feed_getRegisteredTemplateBundles_response">
            <summary>
            <para>
            Regular expression: (template_bundle*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.feed_getRegisteredTemplateBundles_response.#ctor">
            <summary>
            <para>
            Regular expression: (template_bundle*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.feed_getRegisteredTemplateBundles_response.template_bundle">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (template_bundle*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.feed_getRegisteredTemplateBundles_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.admin_getMetrics_response">
            <summary>
            <para>
            Regular expression: (metrics*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.admin_getMetrics_response.#ctor">
            <summary>
            <para>
            Regular expression: (metrics*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.admin_getMetrics_response.metrics">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (metrics*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.admin_getMetrics_response.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.user_status">
            <summary>
            <para>
            Regular expression: (message, time)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.user_status.#ctor">
            <summary>
            <para>
            Regular expression: (message, time)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user_status.message">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (message, time)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user_status.time">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (message, time)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.id_map">
            <summary>
            <para>
            Regular expression: (old_id, new_id)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.id_map.#ctor">
            <summary>
            <para>
            Regular expression: (old_id, new_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.id_map.old_id">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (old_id, new_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.id_map.new_id">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (old_id, new_id)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.arg">
            <summary>
            <para>
            Regular expression: (key, value)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.arg.#ctor">
            <summary>
            <para>
            Regular expression: (key, value)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.arg.key">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (key, value)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.arg.value">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (key, value)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.FacebookApiException">
            <summary>
            <para>
            Regular expression: (error_code, error_msg, request_args)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.FacebookApiException.#ctor">
            <summary>
            <para>
            Regular expression: (error_code, error_msg, request_args)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.FacebookApiException.error_code">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (error_code, error_msg, request_args)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.FacebookApiException.error_msg">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (error_code, error_msg, request_args)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.FacebookApiException.request_args">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (error_code, error_msg, request_args)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.FacebookApiException.request_argsLocalType">
            <summary>
            <para>
            Regular expression: (arg*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.FacebookApiException.request_argsLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (arg*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.FacebookApiException.request_argsLocalType.arg">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (arg*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.FacebookApiException.request_argsLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.session_info">
            <summary>
            <para>
            Regular expression: (session_key, uid, expires, secret?)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.session_info.#ctor">
            <summary>
            <para>
            Regular expression: (session_key, uid, expires, secret?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.session_info.session_key">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (session_key, uid, expires, secret?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.session_info.uid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (session_key, uid, expires, secret?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.session_info.expires">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (session_key, uid, expires, secret?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.session_info.secret">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (session_key, uid, expires, secret?)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.location">
            <summary>
            <para>
            Regular expression: (street?, city, state, country, zip?, latitude?, longitude?)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.location.#ctor">
            <summary>
            <para>
            Regular expression: (street?, city, state, country, zip?, latitude?, longitude?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.location.street">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (street?, city, state, country, zip?, latitude?, longitude?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.location.city">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (street?, city, state, country, zip?, latitude?, longitude?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.location.state">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (street?, city, state, country, zip?, latitude?, longitude?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.location.country">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (street?, city, state, country, zip?, latitude?, longitude?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.location.zip">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (street?, city, state, country, zip?, latitude?, longitude?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.location.latitude">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (street?, city, state, country, zip?, latitude?, longitude?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.location.longitude">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (street?, city, state, country, zip?, latitude?, longitude?)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.connect_account_info">
            <summary>
            <para>
            Regular expression: (email_hash, account_id?, account_url?)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.connect_account_info.#ctor">
            <summary>
            <para>
            Regular expression: (email_hash, account_id?, account_url?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.connect_account_info.email_hash">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (email_hash, account_id?, account_url?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.connect_account_info.account_id">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (email_hash, account_id?, account_url?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.connect_account_info.account_url">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (email_hash, account_id?, account_url?)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.event_member">
            <summary>
            <para>
            Regular expression: (uid, oid, attending)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.event_member.#ctor">
            <summary>
            <para>
            Regular expression: (uid, oid, attending)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_member.uid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, oid, attending)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_member.oid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, oid, attending)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_member.attending">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, oid, attending)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.group_member">
            <summary>
            <para>
            Regular expression: (uid, gid, positions)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.group_member.#ctor">
            <summary>
            <para>
            Regular expression: (uid, gid, positions)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_member.uid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, gid, positions)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_member.gid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, gid, positions)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_member.positions">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, gid, positions)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.group_member.positionsLocalType">
            <summary>
            <para>
            Regular expression: (member_type*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.group_member.positionsLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (member_type*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_member.positionsLocalType.member_type">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (member_type*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_member.positionsLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.group_members">
            <summary>
            <para>
            Regular expression: (members, admins, officers, not_replied)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.group_members.#ctor">
            <summary>
            <para>
            Regular expression: (members, admins, officers, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.members">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (members, admins, officers, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.admins">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (members, admins, officers, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.officers">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (members, admins, officers, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.not_replied">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (members, admins, officers, not_replied)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.group_members.membersLocalType">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.group_members.membersLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.membersLocalType.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.membersLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.group_members.adminsLocalType">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.group_members.adminsLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.adminsLocalType.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.adminsLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.group_members.officersLocalType">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.group_members.officersLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.officersLocalType.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.officersLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.group_members.not_repliedLocalType">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.group_members.not_repliedLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.not_repliedLocalType.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.group_members.not_repliedLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.event_members">
            <summary>
            <para>
            Regular expression: (attending, unsure, declined, not_replied)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.event_members.#ctor">
            <summary>
            <para>
            Regular expression: (attending, unsure, declined, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.attending">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (attending, unsure, declined, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.unsure">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (attending, unsure, declined, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.declined">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (attending, unsure, declined, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.not_replied">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (attending, unsure, declined, not_replied)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.event_members.attendingLocalType">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.event_members.attendingLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.attendingLocalType.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.attendingLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.event_members.unsureLocalType">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.event_members.unsureLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.unsureLocalType.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.unsureLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.event_members.declinedLocalType">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.event_members.declinedLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.declinedLocalType.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.declinedLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.event_members.not_repliedLocalType">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.event_members.not_repliedLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.not_repliedLocalType.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.event_members.not_repliedLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.notification_count">
            <summary>
            <para>
            Regular expression: (unread, most_recent)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.notification_count.#ctor">
            <summary>
            <para>
            Regular expression: (unread, most_recent)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notification_count.unread">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (unread, most_recent)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notification_count.most_recent">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (unread, most_recent)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.notifications">
            <summary>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.notifications.#ctor">
            <summary>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.messages">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.pokes">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.shares">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.friend_requests">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.group_invites">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.event_invites">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.notifications.friend_requestsLocalType">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.notifications.friend_requestsLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.friend_requestsLocalType.uid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (uid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.friend_requestsLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.notifications.group_invitesLocalType">
            <summary>
            <para>
            Regular expression: (gid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.notifications.group_invitesLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (gid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.group_invitesLocalType.gid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (gid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.group_invitesLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.notifications.event_invitesLocalType">
            <summary>
            <para>
            Regular expression: (eid*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.notifications.event_invitesLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (eid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.event_invitesLocalType.eid">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (eid*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications.event_invitesLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.affiliation">
            <summary>
            <para>
            Regular expression: (nid, name, type, status, year)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.affiliation.#ctor">
            <summary>
            <para>
            Regular expression: (nid, name, type, status, year)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.affiliation.nid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (nid, name, type, status, year)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.affiliation.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (nid, name, type, status, year)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.affiliation.type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (nid, name, type, status, year)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.affiliation.status">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (nid, name, type, status, year)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.affiliation.year">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (nid, name, type, status, year)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.hs_info">
            <summary>
            <para>
            Regular expression: (hs1_name, hs2_name, grad_year, hs1_id, hs2_id)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.hs_info.#ctor">
            <summary>
            <para>
            Regular expression: (hs1_name, hs2_name, grad_year, hs1_id, hs2_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.hs_info.hs1_name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (hs1_name, hs2_name, grad_year, hs1_id, hs2_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.hs_info.hs2_name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (hs1_name, hs2_name, grad_year, hs1_id, hs2_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.hs_info.grad_year">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (hs1_name, hs2_name, grad_year, hs1_id, hs2_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.hs_info.hs1_id">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (hs1_name, hs2_name, grad_year, hs1_id, hs2_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.hs_info.hs2_id">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (hs1_name, hs2_name, grad_year, hs1_id, hs2_id)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.education_info">
            <summary>
            <para>
            Regular expression: (name, year, concentrations, degree)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.education_info.#ctor">
            <summary>
            <para>
            Regular expression: (name, year, concentrations, degree)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.education_info.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, year, concentrations, degree)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.education_info.year">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, year, concentrations, degree)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.education_info.concentrations">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, year, concentrations, degree)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.education_info.degree">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, year, concentrations, degree)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.education_info.concentrationsLocalType">
            <summary>
            <para>
            Regular expression: (concentration*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.education_info.concentrationsLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (concentration*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.education_info.concentrationsLocalType.concentration">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (concentration*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.education_info.concentrationsLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.work_info">
            <summary>
            <para>
            Regular expression: (location, company_name, position, description, start_date, end_date)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.work_info.#ctor">
            <summary>
            <para>
            Regular expression: (location, company_name, position, description, start_date, end_date)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.work_info.location">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (location, company_name, position, description, start_date, end_date)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.work_info.company_name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (location, company_name, position, description, start_date, end_date)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.work_info.position">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (location, company_name, position, description, start_date, end_date)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.work_info.description">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (location, company_name, position, description, start_date, end_date)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.work_info.start_date">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (location, company_name, position, description, start_date, end_date)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.work_info.end_date">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (location, company_name, position, description, start_date, end_date)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.friend_info">
            <summary>
            <para>
            Regular expression: (uid1?, uid2?, are_friends?)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.friend_info.#ctor">
            <summary>
            <para>
            Regular expression: (uid1?, uid2?, are_friends?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friend_info.uid1">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (uid1?, uid2?, are_friends?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friend_info.uid2">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (uid1?, uid2?, are_friends?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friend_info.are_friends">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (uid1?, uid2?, are_friends?)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.friendlist">
            <summary>
            <para>
            Regular expression: (flid, name, owner?)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.friendlist.#ctor">
            <summary>
            <para>
            Regular expression: (flid, name, owner?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friendlist.flid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (flid, name, owner?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friendlist.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (flid, name, owner?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.friendlist.owner">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (flid, name, owner?)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.object_type_info">
            <summary>
            <para>
            Regular expression: (name, object_class)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.object_type_info.#ctor">
            <summary>
            <para>
            Regular expression: (name, object_class)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_type_info.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, object_class)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_type_info.object_class">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, object_class)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.object_property_info">
            <summary>
            <para>
            Regular expression: (name, data_type, index_type)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.object_property_info.#ctor">
            <summary>
            <para>
            Regular expression: (name, data_type, index_type)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_property_info.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, data_type, index_type)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_property_info.data_type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, data_type, index_type)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_property_info.index_type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, data_type, index_type)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.assoc_object_type">
            <summary>
            <para>
            Regular expression: (alias, object_type, unique)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.assoc_object_type.#ctor">
            <summary>
            <para>
            Regular expression: (alias, object_type, unique)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.assoc_object_type.alias">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (alias, object_type, unique)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.assoc_object_type.object_type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (alias, object_type, unique)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.assoc_object_type.unique">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (alias, object_type, unique)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.object_assoc_info">
            <summary>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.object_assoc_info.#ctor">
            <summary>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_assoc_info.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_assoc_info.assoc_type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_assoc_info.assoc_info1">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_assoc_info.assoc_info2">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.object_association">
            <summary>
            <para>
            Regular expression: (name, id1, id2, data, time)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.object_association.#ctor">
            <summary>
            <para>
            Regular expression: (name, id1, id2, data, time)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_association.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, id1, id2, data, time)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_association.id1">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, id1, id2, data, time)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_association.id2">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, id1, id2, data, time)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_association.data">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, id1, id2, data, time)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.object_association.time">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, id1, id2, data, time)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.listing">
            <summary>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.listing.#ctor">
            <summary>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.listing_id">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.url">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.title">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.description">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.price">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.poster">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.update_time">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.category">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.subcategory">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.image_urls">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.condition">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.isbn">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.num_beds">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.num_maths">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.dogs">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.cats">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.smoking">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.square_footage">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.street">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.crossstreet">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.postal">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.rent">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.pay">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.full">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.intern">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.summer">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.nonprofit">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.pay_type">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (listing_id, url, title, description, price?, poster, update_time, category, subcategory, image_urls?, condition?, isbn?, num_beds?, num_maths?, dogs?, cats?, smoking?, square_footage?, street?, crossstreet?, postal?, rent?, pay?, full?, intern?, summer?, nonprofit?, pay_type?)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.listing.image_urlsLocalType">
            <summary>
            <para>
            Regular expression: (image_urls_elt*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.listing.image_urlsLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (image_urls_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.image_urlsLocalType.image_urls_elt">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (image_urls_elt*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.listing.image_urlsLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.preference">
            <summary>
            <para>
            Regular expression: (pref_id, value)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.preference.#ctor">
            <summary>
            <para>
            Regular expression: (pref_id, value)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.preference.pref_id">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pref_id, value)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.preference.value">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pref_id, value)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.page_hours">
            <summary>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.page_hours.#ctor">
            <summary>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.mon_1_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.mon_1_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.tue_1_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.tue_1_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.wed_1_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.thu_1_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.thu_1_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.fri_1_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.fri_1_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.sat_1_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.sat_1_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.sun_1_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.sun_1_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.mon_2_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.mon_2_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.tue_2_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.tue_2_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.wed_2_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.wed_2_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.thu_2_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.thu_2_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.fri_2_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.fri_2_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.sat_2_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.sat_2_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.sun_2_open">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_hours.sun_2_close">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (mon_1_open, mon_1_close, tue_1_open, tue_1_close, wed_1_open, thu_1_open, thu_1_close, fri_1_open, fri_1_close, sat_1_open, sat_1_close, sun_1_open, sun_1_close, mon_2_open, mon_2_close, tue_2_open, tue_2_close, wed_2_open, wed_2_close, thu_2_open, thu_2_close, fri_2_open, fri_2_close, sat_2_open, sat_2_close, sun_2_open, sun_2_close)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.page_parking">
            <summary>
            <para>
            Regular expression: (street, lot, valet)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.page_parking.#ctor">
            <summary>
            <para>
            Regular expression: (street, lot, valet)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_parking.street">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (street, lot, valet)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_parking.lot">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (street, lot, valet)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_parking.valet">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (street, lot, valet)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.page_restaurant_services">
            <summary>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.page_restaurant_services.#ctor">
            <summary>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_services.reserve">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_services.walkins">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_services.groups">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_services.kids">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_services.takeout">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_services.delivery">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_services.catering">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_services.waiter">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_services.outdoor">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (reserve, walkins, groups, kids, takeout, delivery, catering, waiter, outdoor)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.page_restaurant_specialties">
            <summary>
            <para>
            Regular expression: (breakfast, lunch, dinner, coffee, drinks)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.page_restaurant_specialties.#ctor">
            <summary>
            <para>
            Regular expression: (breakfast, lunch, dinner, coffee, drinks)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_specialties.breakfast">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (breakfast, lunch, dinner, coffee, drinks)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_specialties.lunch">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (breakfast, lunch, dinner, coffee, drinks)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_specialties.dinner">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (breakfast, lunch, dinner, coffee, drinks)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_specialties.coffee">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (breakfast, lunch, dinner, coffee, drinks)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_restaurant_specialties.drinks">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (breakfast, lunch, dinner, coffee, drinks)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.page_payment_options">
            <summary>
            <para>
            Regular expression: (cash_only, visa, amex, mastercard, discover)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.page_payment_options.#ctor">
            <summary>
            <para>
            Regular expression: (cash_only, visa, amex, mastercard, discover)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_payment_options.cash_only">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (cash_only, visa, amex, mastercard, discover)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_payment_options.visa">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (cash_only, visa, amex, mastercard, discover)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_payment_options.amex">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (cash_only, visa, amex, mastercard, discover)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_payment_options.mastercard">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (cash_only, visa, amex, mastercard, discover)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page_payment_options.discover">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (cash_only, visa, amex, mastercard, discover)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.page">
            <summary>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.page.#ctor">
            <summary>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.page_id">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.name">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.pic_small">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.pic_big">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.pic_square">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.pic">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.pic_large">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.page_url">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.status">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.type">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.website">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.has_added_app">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.founded">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.company_overview">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.mission">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.products">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.location">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.parking">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.public_transit">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.hours">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.attire">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.payment_options">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.culinary_team">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.general_manager">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.price_range">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.restaurant_services">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.restaurant_specialties">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.release_date">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.genre">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.starring">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.screenplay_by">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.directed_by">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.produced_by">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.studio">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.awards">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.plot_outline">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.network">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.season">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.schedule">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.written_by">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.band_members">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.hometown">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.current_location">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.record_label">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.booking_agent">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.artists_we_like">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.influences">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.band_interests">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.bio">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.affiliation">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.birthday">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.personal_info">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.personal_interests">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.members">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.built">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.features">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.mpg">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.page.general_info">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (page_id?, name?, pic_small?, pic_big?, pic_square?, pic?, pic_large?, page_url?, status?, type?, website?, has_added_app?, founded?, company_overview?, mission?, products?, location?, parking?, public_transit?, hours?, attire?, payment_options?, culinary_team?, general_manager?, price_range?, restaurant_services?, restaurant_specialties?, release_date?, genre?, starring?, screenplay_by?, directed_by?, produced_by?, studio?, awards?, plot_outline?, network?, season?, schedule?, written_by?, band_members?, hometown?, current_location?, record_label?, booking_agent?, artists_we_like?, influences?, band_interests?, bio?, affiliation?, birthday?, personal_info?, personal_interests?, members?, built?, features?, mpg?, general_info?)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.cookie">
            <summary>
            <para>
            Regular expression: (uid, name, value, expires, path)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.cookie.#ctor">
            <summary>
            <para>
            Regular expression: (uid, name, value, expires, path)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.cookie.uid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, name, value, expires, path)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.cookie.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, name, value, expires, path)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.cookie.value">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, name, value, expires, path)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.cookie.expires">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, name, value, expires, path)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.cookie.path">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, name, value, expires, path)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.phrase">
            <summary>
            <para>
            Regular expression: (description, text)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.phrase.#ctor">
            <summary>
            <para>
            Regular expression: (description, text)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.phrase.description">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (description, text)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.phrase.text">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (description, text)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.developer_info">
            <summary>
            <para>
            Regular expression: (uid, name)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.developer_info.#ctor">
            <summary>
            <para>
            Regular expression: (uid, name)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.developer_info.uid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, name)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.developer_info.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (uid, name)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.app_info">
            <summary>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.app_info.#ctor">
            <summary>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.app_id">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.api_key">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.canvas_name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.display_name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.icon_url">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.logo_url">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.developers">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.company_name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.description">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.daily_active_users">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.weekly_active_users">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.monthly_active_users">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.app_info.developersLocalType">
            <summary>
            <para>
            Regular expression: (developer_info*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.app_info.developersLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (developer_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.developersLocalType.developer_info">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (developer_info*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.app_info.developersLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.metrics">
            <summary>
            <para>
            Regular expression: (end_time?, active_users?, api_calls?, unique_api_calls?, canvas_page_views?, unique_canvas_page_views?, canvas_http_request_time_avg?, canvas_fbml_render_time_avg?)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.metrics.#ctor">
            <summary>
            <para>
            Regular expression: (end_time?, active_users?, api_calls?, unique_api_calls?, canvas_page_views?, unique_canvas_page_views?, canvas_http_request_time_avg?, canvas_fbml_render_time_avg?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.metrics.end_time">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (end_time?, active_users?, api_calls?, unique_api_calls?, canvas_page_views?, unique_canvas_page_views?, canvas_http_request_time_avg?, canvas_fbml_render_time_avg?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.metrics.active_users">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (end_time?, active_users?, api_calls?, unique_api_calls?, canvas_page_views?, unique_canvas_page_views?, canvas_http_request_time_avg?, canvas_fbml_render_time_avg?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.metrics.api_calls">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (end_time?, active_users?, api_calls?, unique_api_calls?, canvas_page_views?, unique_canvas_page_views?, canvas_http_request_time_avg?, canvas_fbml_render_time_avg?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.metrics.unique_api_calls">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (end_time?, active_users?, api_calls?, unique_api_calls?, canvas_page_views?, unique_canvas_page_views?, canvas_http_request_time_avg?, canvas_fbml_render_time_avg?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.metrics.canvas_page_views">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (end_time?, active_users?, api_calls?, unique_api_calls?, canvas_page_views?, unique_canvas_page_views?, canvas_http_request_time_avg?, canvas_fbml_render_time_avg?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.metrics.unique_canvas_page_views">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (end_time?, active_users?, api_calls?, unique_api_calls?, canvas_page_views?, unique_canvas_page_views?, canvas_http_request_time_avg?, canvas_fbml_render_time_avg?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.metrics.canvas_http_request_time_avg">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (end_time?, active_users?, api_calls?, unique_api_calls?, canvas_page_views?, unique_canvas_page_views?, canvas_http_request_time_avg?, canvas_fbml_render_time_avg?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.metrics.canvas_fbml_render_time_avg">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (end_time?, active_users?, api_calls?, unique_api_calls?, canvas_page_views?, unique_canvas_page_views?, canvas_http_request_time_avg?, canvas_fbml_render_time_avg?)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.short_story_template">
            <summary>
            <para>
            Regular expression: (template_title, template_body)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.short_story_template.#ctor">
            <summary>
            <para>
            Regular expression: (template_title, template_body)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.short_story_template.template_title">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (template_title, template_body)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.short_story_template.template_body">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (template_title, template_body)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.full_story_template">
            <summary>
            <para>
            Regular expression: (template_title, template_body)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.full_story_template.#ctor">
            <summary>
            <para>
            Regular expression: (template_title, template_body)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.full_story_template.template_title">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (template_title, template_body)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.full_story_template.template_body">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (template_title, template_body)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.action_link">
            <summary>
            <para>
            Regular expression: (text, href)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.action_link.#ctor">
            <summary>
            <para>
            Regular expression: (text, href)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.action_link.text">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (text, href)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.action_link.href">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (text, href)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.template_bundle">
            <summary>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.template_bundle.#ctor">
            <summary>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.one_line_story_templates">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.short_story_templates">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.full_story_template">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.action_links">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.time_created">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.template_bundle_id">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.template_bundle.one_line_story_templatesLocalType">
            <summary>
            <para>
            Regular expression: (one_line_story_template*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.template_bundle.one_line_story_templatesLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (one_line_story_template*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.one_line_story_templatesLocalType.one_line_story_template">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (one_line_story_template*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.one_line_story_templatesLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.template_bundle.short_story_templatesLocalType">
            <summary>
            <para>
            Regular expression: (short_story_template*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.template_bundle.short_story_templatesLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (short_story_template*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.short_story_templatesLocalType.short_story_template">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (short_story_template*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.short_story_templatesLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.template_bundle.action_linksLocalType">
            <summary>
            <para>
            Regular expression: (action_link*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.template_bundle.action_linksLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (action_link*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.action_linksLocalType.action_link">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (action_link*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.template_bundle.action_linksLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.info_item">
            <summary>
            <para>
            Regular expression: (label, sublabel, description, link, image, meta)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.info_item.#ctor">
            <summary>
            <para>
            Regular expression: (label, sublabel, description, link, image, meta)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.info_item.label">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (label, sublabel, description, link, image, meta)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.info_item.sublabel">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (label, sublabel, description, link, image, meta)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.info_item.description">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (label, sublabel, description, link, image, meta)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.info_item.link">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (label, sublabel, description, link, image, meta)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.info_item.image">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (label, sublabel, description, link, image, meta)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.info_item.meta">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (label, sublabel, description, link, image, meta)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.info_field">
            <summary>
            <para>
            Regular expression: (field, items)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.info_field.#ctor">
            <summary>
            <para>
            Regular expression: (field, items)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.info_field.field">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (field, items)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.info_field.items">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (field, items)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.info_field.itemsLocalType">
            <summary>
            <para>
            Regular expression: (info_item*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.info_field.itemsLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (info_item*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.info_field.itemsLocalType.info_item">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (info_item*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.info_field.itemsLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.user_info">
            <summary>
            <para>
            Regular expression: (title, type, info_fields)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.user_info.#ctor">
            <summary>
            <para>
            Regular expression: (title, type, info_fields)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user_info.title">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (title, type, info_fields)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user_info.type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (title, type, info_fields)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user_info.info_fields">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (title, type, info_fields)
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.user_info.info_fieldsLocalType">
            <summary>
            <para>
            Regular expression: (info_field*)*
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.user_info.info_fieldsLocalType.#ctor">
            <summary>
            <para>
            Regular expression: (info_field*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user_info.info_fieldsLocalType.info_field">
            <summary>
            <para>
            Occurrence: optional, repeating
            </para>
            <para>
            Regular expression: (info_field*)*
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.user_info.info_fieldsLocalType.list">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:facebook.Schema.container">
            <summary>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="M:facebook.Schema.container.#ctor">
            <summary>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.container.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.container.assoc_type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.container.assoc_info1">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.container.assoc_info2">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.auth_getSession_response.session_key">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (session_key, uid, expires, secret?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.auth_getSession_response.uid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (session_key, uid, expires, secret?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.auth_getSession_response.expires">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (session_key, uid, expires, secret?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.auth_getSession_response.secret">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (session_key, uid, expires, secret?)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.events_getMembers_response.attending">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (attending, unsure, declined, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.events_getMembers_response.unsure">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (attending, unsure, declined, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.events_getMembers_response.declined">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (attending, unsure, declined, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.events_getMembers_response.not_replied">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (attending, unsure, declined, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.groups_getMembers_response.members">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (members, admins, officers, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.groups_getMembers_response.admins">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (members, admins, officers, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.groups_getMembers_response.officers">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (members, admins, officers, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.groups_getMembers_response.not_replied">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (members, admins, officers, not_replied)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications_get_response.messages">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications_get_response.pokes">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications_get_response.shares">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications_get_response.friend_requests">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications_get_response.group_invites">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.notifications_get_response.event_invites">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (messages, pokes, shares, friend_requests, group_invites, event_invites)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_createAlbum_response.aid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_createAlbum_response.cover_pid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_createAlbum_response.owner">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_createAlbum_response.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_createAlbum_response.created">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_createAlbum_response.modified">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_createAlbum_response.description">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_createAlbum_response.location">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_createAlbum_response.link">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_createAlbum_response.size">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (aid, cover_pid, owner, name, created, modified, description, location, link, size)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_upload_response.pid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_upload_response.aid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_upload_response.owner">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_upload_response.src">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_upload_response.src_big">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_upload_response.src_small">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_upload_response.link">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_upload_response.caption">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_upload_response.created">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.photos_upload_response.story_fbid">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (pid, aid, owner, src, src_big, src_small, link, caption, created, story_fbid)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.profile_getInfo_response.title">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (title, type, info_fields)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.profile_getInfo_response.type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (title, type, info_fields)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.profile_getInfo_response.info_fields">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (title, type, info_fields)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getObject_response.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getObject_response.assoc_type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getObject_response.assoc_info1">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getObject_response.assoc_info2">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociationDefinition_response.name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociationDefinition_response.assoc_type">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociationDefinition_response.assoc_info1">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.data_getAssociationDefinition_response.assoc_info2">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (name, assoc_type, assoc_info1, assoc_info2)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.app_id">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.api_key">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.canvas_name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.display_name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.icon_url">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.logo_url">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.developers">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.company_name">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.description">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.daily_active_users">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.weekly_active_users">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.application_getPublicInfo_response.monthly_active_users">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (app_id, api_key, canvas_name, display_name, icon_url, logo_url, developers, company_name, description, daily_active_users, weekly_active_users, monthly_active_users)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.feed_getRegisteredTemplateBundleByID_response.one_line_story_templates">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.feed_getRegisteredTemplateBundleByID_response.short_story_templates">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.feed_getRegisteredTemplateBundleByID_response.full_story_template">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.feed_getRegisteredTemplateBundleByID_response.action_links">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.feed_getRegisteredTemplateBundleByID_response.time_created">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.feed_getRegisteredTemplateBundleByID_response.template_bundle_id">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (one_line_story_templates, short_story_templates, full_story_template, action_links, time_created, template_bundle_id)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.error_response.error_code">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (error_code, error_msg, request_args)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.error_response.error_msg">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (error_code, error_msg, request_args)
            </para>
            </summary>
        </member>
        <member name="P:facebook.Schema.error_response.request_args">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (error_code, error_msg, request_args)
            </para>
            </summary>
        </member>
        <member name="T:facebook.notifications">
            <summary>
            Facebook notifications api methods.
            </summary>
        </member>
        <member name="M:facebook.notifications.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.notifications
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.notifications.get">
            <summary>
            Returns information on outstanding Facebook notifications for current session user.
            </summary>
            <returns>This method returns the same set of subelements, whether or not there are outstanding notifications in any area. If the unread subelement value is 0 for any of the pokes or shares elements, the most_recent element will be 0. Otherwise, the most_recent element will contain an identifier for the most recent notification of the enclosing type.</returns>
        </member>
        <member name="M:facebook.notifications.send(System.String,System.String)">
            <summary>
            Send a notification to a set of users. You can send messages to the user's notification page without needing any confirmation. Notifications sent to the notifications page for non-app users are subject to spam control. Additionally, any notification that you send on behalf of a user will be shown on that user's notifications page as a "sent notification."
            </summary>
            <param name="to_ids">Comma-separated list of recipient ids. These must be friends of the logged-in user or people who have added your application. If you leave this blank, you can send a notification directly to the session user with no name prefixed to the message.</param>
            <param name="notification">FBML for the notifications page.</param>
            <returns>This returns a comma-separated list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
            <remarks>The notification parameter is a very stripped-down set of FBML which allows only tags that result in just text and links.</remarks>
        </member>
        <member name="M:facebook.notifications.sendEmail(System.String,System.String,System.String,System.String)">
            <summary>
            Send an email to the specified users, who must have added your application. You can only send one email to a user per day. Requires a session key for desktop apps, which may only send emails to the person whose session it is (does not require a session for web apps).
            </summary>
            <param name="recipients">Comma-separated list of recipient ids. These must be people who have added the application. You can email up to 100 people at a time.</param>
            <param name="subject">Subject of the email.</param>
            <param name="text">The plain text version of the email content. You must include at least one of either the fbml or text parameters. </param>
            <param name="fbml">The FBML version of the email. You must include at least one of either the fbml or text parameters. The fbml parameter is a stripped-down set of FBML that allows only tags that result in text, links and linebreaks.</param>
            <returns>This returns a comma-separated list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
        </member>
        <member name="T:facebook.profile">
            <summary>
            
            </summary>
        </member>
        <member name="M:facebook.profile.#ctor(facebook.API)">
            <summary>
            Public constructor for facebook.profile
            </summary>
            <param name="parent">Needs a connected API object for making requests</param>
        </member>
        <member name="M:facebook.profile.getFBML(System.Int64,System.Int32)">
            <summary>
            Gets the FBML for the profile box that is currently set for a user's profile (your application set the FBML previously by calling the profile.setFBML method). See the FBML documentation for a description of the markup and its role in various contexts. 
            </summary>
            <param name="uid">The user whose profile FBML is to be fetched, or the page ID in case of a Page. This parameter applies only to Web applications and is required by them only if the session_key is not specified. Facebook ignores this parameter if it is passed by a desktop application. </param>
            <param name="type">The type of profile box to retrieve. Specify 1 for the original style (wide and narrow column boxes), 2 for profile_main box. (default value is 1)</param>
            <returns>The FBML markup from the user's profile.</returns>
            <remarks>It is not a violation of Facebook Privacy policy if you use this method to retrieve content originally rendered by your application from a user's profile, even if Facebook privacy restrictions would otherwise keep you from seeing that user’s profile (for example, you are not friends with the user in question). Cases where this would arise include verifying content posted by one user of your application to another user’s profile complies with the Facebook Developer Terms of Service. </remarks>
        </member>
        <member name="M:facebook.profile.setFBML(System.Int64,System.String,System.String,System.String)">
            <summary>
            Sets the FBML for a user's profile, including the content for both the profile box and the profile actions. See the FBML documentation for a description of the markup and its role in various contexts.
            </summary>
            <param name="uid">The user whose profile is to be updated. Not allowed for desktop applications (since the application secret is essentially public).</param>
            <param name="profile">The FBML intended for the application profile box on the user's profile. </param>
            <param name="profile_main">The FBML intended for the narrow profile box on the Wall tab of the user's profile.</param>
            <param name="mobile_profile">The FBML intended for mobile devices. </param>
            <returns>True on success, false if error.</returns>
            <remarks>The FBML is cached on Facebook's server for that particular user and that particular application. To change it, profile.setFBML must be called through a canvas page or some other script (such as a cron job) that makes use of the Facebook API. </remarks>
        </member>
    </members>
</doc>
